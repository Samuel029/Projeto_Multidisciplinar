<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TechNoBug - Tela Inicial</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/telainicial.css') }}">
</head>
<body>
    <!-- Header -->
    <header class="app-header">
        <div class="header-content">
            <div class="search-bar">
                <i class="fas fa-search"></i>
                <input type="text" placeholder="Pesquisar postagens, tópicos...">
            </div>
            <div class="logo">
                <i class="fas fa-graduation-cap"></i>
                <span>TechNoBug</span>
            </div>
            <button class="btn menu-btn" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasMenu" aria-controls="offcanvasMenu">
                <i class="fas fa-bars"></i>
                <span>Menu</span>
            </button>
        </div>
    </header>

    <!-- Offcanvas Menu -->
    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasMenu" aria-labelledby="offcanvasMenuLabel">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="offcanvasMenuLabel">Menu</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <div class="user-profile mb-4">
                <div class="d-flex align-items-center">
                    <div class="avatar me-3">
                        <div class="avatar-initials bg-primary text-white rounded-circle d-flex justify-content-center align-items-center">
                            {{ user.username[0]|upper }}
                        </div>
                    </div>
                    <div>
                        <h6 class="mb-0">{{ user.username }}</h6>
                        <small class="text-muted">{{ user.email }}</small>
                    </div>
                </div>
            </div>
            <ul class="navbar-nav">
                <li class="nav-item mb-2"><a class="nav-link active" href="{{ url_for('telainicial') }}"><i class="fas fa-home me-2"></i>Página Inicial</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="{{ url_for('materiais') }}"><i class="fas fa-book me-2"></i>Materiais de Estudo</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="{{ url_for('pdfs') }}"><i class="fas fa-file-pdf me-2"></i>PDFs e Apostilas</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="{{ url_for('videos') }}"><i class="fas fa-video me-2"></i>Vídeos e Tutoriais</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="{{ url_for('codigo') }}"><i class="fas fa-code me-2"></i>Exemplos de Código</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="#"><i class="fas fa-users me-2"></i>Comunidade</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="#"><i class="fas fa-cog me-2"></i>Configurações</a></li>
                <li class="nav-item"><a class="nav-link text-danger" href="{{ url_for('logout') }}"><i class="fas fa-sign-out-alt me-2"></i>Sair</a></li>
            </ul>
        </div>
    </div>

    <!-- Category Navigation -->
    <nav class="category-nav">
        <div class="categories-wrapper">
            <div class="categories">
                <div class="category active">Todos</div>
                <div class="category">Versionamento</div>
                <div class="category">I.A</div>
                <div class="category">Modelagem a Banco de Dados</div>
                <div class="category">Lógica</div>
                <div class="category">Processos</div>
                <div class="category">Front-end</div>
                <div class="category">Back-end</div>
                <div class="category">Programação Android</div>
                <div class="category">Projeto Multidisciplinar</div>
                <div class="category">Carreiras</div>
                <div class="category">Redes</div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container">
        <main class="main-content">
            <!-- Post Creation Section -->
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-edit"></i>
                    <span>Compartilhe sua Dúvida</span>
                </h2>
            </div>
            <div class="post-creation-card">
                <form method="POST" action="{{ url_for('telainicial') }}" id="postForm">
                    <div class="mb-3 position-relative">
                        <textarea class="form-control" name="content" rows="4" placeholder="O que você está pensando, {{ user.username }}?" required></textarea>
                        <div class="char-counter">0/500</div>
                    </div>
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="category-selector">
                                  <select name="category" class="form-select" aria-label="Selecione uma categoria">
                                    <option value="Dúvidas Gerais">Dúvidas Gerais</option>
                                    <option value="Programação">Programação</option>
                                    <option value="I.A">I.A</option>
                                    <option value="Banco de Dados">Banco de Dados</option>
                                    <option value="Modelagem a Banco de Dados">Modelagem a Banco de Dados</option>
                                    <option value="Lógica">Lógica</option>
                                    <option value="Processos">Processos</option>
                                    <option value="Front-end">Front-end</option>
                                    <option value="Back-end">Back-end</option>
                                    <option value="Programação Android">Programação Android</option>
                                    <option value="Projeto Multidisciplinar">Projeto Multidisciplinar</option>
                                    <option value="Carreiras">Carreiras</option>
                                    <option value="Redes">Redes</option>
                                    <option value="Versionamento">Versionamento</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary btn-publish">
                            <i class="fas fa-paper-plane me-2"></i>Publicar
                        </button>
                    </div>
                </form>
            </div>

            <!-- Recent Posts Section -->
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-stream"></i>
                    <span>Postagens Recentes</span>
                </h2>
            </div>
            <div class="post-grid">
                {% if posts %}
                    {% for post in posts %}
                        <div class="post-card" data-post-id="{{ post.id }}" data-category="{{ post.category }}">
                            <div class="post-header">
                                <div class="user-info">
                                    <div class="avatar">
                                        <div class="avatar-initials bg-primary text-white rounded-circle d-flex justify-content-center align-items-center">
                                            {{ post.author.username[0]|upper }}
                                        </div>
                                    </div>
                                    <div>
                                        <h5 class="username">{{ post.author.username }}</h5>
                                        <small class="text-muted">{{ post.created_at.strftime('%d/%m/%Y %H:%M') }}</small>
                                    </div>
                                </div>
                                {% if post.user_id == user.id %}
                                    <div class="post-actions">
                                        <button class="btn btn-sm btn-danger delete-post" data-post-id="{{ post.id }}">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                {% endif %}
                            </div>
                            <div class="post-content">
                                <div class="post-category-tag">{{ post.category }}</div>
                                <p>{{ post.content }}</p>
                            </div>
                            <div class="post-footer">
                                <button class="btn btn-sm btn-outline-primary like-btn">
                                    <i class="fas fa-thumbs-up"></i> <span class="like-count">0</span>
                                </button>
                                <button class="btn btn-sm btn-outline-secondary comment-btn">
                                    <i class="fas fa-comment"></i> Comentar
                                </button>
                            </div>
                        </div>
                    {% endfor %}
                {% else %}
                    <div class="empty-state-card">
                        <div class="text-center py-5">
                            <i class="fas fa-comment-slash fa-3x mb-3 text-muted"></i>
                            <h5>Nenhuma postagem ainda</h5>
                            <p class="text-muted">Seja o primeiro a compartilhar!</p>
                        </div>
                    </div>
                {% endif %}
            </div>
        </main>
    </div>

    <!-- Footer -->
    <footer class="app-footer">
        <div class="footer-content">
            <div class="footer-column">
                <h3>Sobre Nós</h3>
                <ul class="footer-links">
                    <li><a href="#"><i class="fas fa-info-circle"></i> Nossa Missão</a></li>
                    <li><a href="#"><i class="fas fa-users"></i> Equipe</a></li>
                    <li><a href="#"><i class="fas fa-building"></i> Parceiros</a></li>
                    <li><a href="#"><i class="fas fa-newspaper"></i> Blog</a></li>
                </ul>
            </div>
            <div class="footer-column">
                <h3>Recursos</h3>
                <ul class="footer-links">
                    <li><a href="#"><i class="fas fa-book"></i> Biblioteca</a></li>
                    <li><a href="#"><i class="fas fa-code"></i> Projetos</a></li>
                    <li><a href="#"><i class="fas fa-certificate"></i> Certificações</a></li>
                    <li><a href="#"><i class="fas fa-download"></i> Downloads</a></li>
                </ul>
            </div>
            <div class="footer-column">
                <h3>Comunidade</h3>
                <ul class="footer-links">
                    <li><a href="#"><i class="fas fa-comments"></i> Fórum</a></li>
                    <li><a href="#"><i class="fas fa-chalkboard-teacher"></i> Webinars</a></li>
                    <li><a href="#"><i class="fas fa-handshake"></i> Programas de Mentoria</a></li>
                    <li><a href="#"><i class="fas fa-laptop-code"></i> Hackathons</a></li>
                </ul>
            </div>
            <div class="footer-column">
                <h3>Contato</h3>
                <ul class="footer-links">
                    <li><a href="#"><i class="fas fa-envelope"></i> Suporte</a></li>
                    <li><a href="#"><i class="fas fa-headset"></i> Fale Conosco</a></li>
                    <li><a href="#"><i class="fas fa-map-marker-alt"></i> Localização</a></li>
                    <li><a href="#"><i class="fas fa-question-circle"></i> FAQ</a></li>
                </ul>
            </div>
        </div>
        <div class="footer-bottom">
            <p>© 2025 TechNoBug. Todos os direitos reservados.</p>
        </div>
    </footer>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/telainicial.js') }}"></script>
</body>
</html>




document.addEventListener('DOMContentLoaded', function() {
    // Elementos da interface
    const searchBar = document.querySelector('.search-bar');
    const searchInput = document.querySelector('.search-bar input');
    const searchIcon = document.querySelector('.search-bar i');
    const categories = document.querySelectorAll('.category');
    const postForm = document.getElementById('postForm');
    const postTextarea = document.querySelector('textarea[name="content"]');
    const charCounter = document.querySelector('.char-counter');
    const categorySelect = document.querySelector('select[name="category"]');
    const sideMenu = document.getElementById('offcanvasMenu');
    const deleteButtons = document.querySelectorAll('.delete-post');
    const likeButtons = document.querySelectorAll('.like-btn');
    const commentButtons = document.querySelectorAll('.comment-btn');

    // Inicializa componentes
    initializeComponents();

    // Configura eventos
    setupSearchBar();
    setupCategoryFilter();
    setupPostForm();
    setupDeleteButtons();
    setupLikeButtons();
    setupCommentButtons();
    setupCommentForms();
    setupThemeSwitch();
    setupDrawer();

    function initializeComponents() {
        // Carrega likes salvos
        likeButtons.forEach(btn => {
            const postId = btn.closest('.post-card').dataset.postId;
            const savedLikes = localStorage.getItem(`likes_${postId}`) || 0;
            btn.querySelector('.like-count').textContent = savedLikes;
            if (localStorage.getItem(`liked_${postId}`)) {
                btn.classList.add('active');
            }
        });

        // Inicializa o contador de caracteres para o formulário de postagem
        if (postTextarea && charCounter) {
            postTextarea.dispatchEvent(new Event('input'));
        }

        // Ajusta a categoria ativa ao iniciar a página
        if (categories && categories.length > 0) {
            const activeCategory = localStorage.getItem('activeCategory') || 'Todas';
            categories.forEach(cat => {
                if (cat.textContent.trim() === activeCategory) {
                    cat.classList.add('active');
                } else {
                    cat.classList.remove('active');
                }
            });
        }
    }

    function setupSearchBar() {
        if (!searchBar || !searchInput || !searchIcon) return;

        // Toggle da barra de pesquisa em dispositivos móveis
        searchIcon.addEventListener('click', function(event) {
            if (window.innerWidth <= 992) {
                searchBar.classList.toggle('search-active');
                if (searchBar.classList.contains('search-active')) {
                    searchInput.focus();
                    searchInput.value = '';
                    filterPosts('');
                } else {
                    searchInput.blur();
                    searchInput.value = '';
                    filterPosts('');
                }
                event.stopPropagation();
            }
        });

        // Fecha a barra de pesquisa ao clicar fora
        document.addEventListener('click', function(event) {
            if (window.innerWidth <= 992 && !searchBar.contains(event.target)) {
                searchBar.classList.remove('search-active');
                searchInput.value = '';
                filterPosts('');
            }
        });

        searchBar.addEventListener('click', function(event) {
            event.stopPropagation();
        });

        // Pesquisa em tempo real
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase().trim();
            filterPosts(searchTerm);
        });

        // Pesquisa ao pressionar Enter
        searchInput.addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                const searchTerm = this.value.toLowerCase().trim();
                filterPosts(searchTerm);
                showNotification('Pesquisa realizada!', 'success');
            }
        });
    }

    function filterPosts(searchTerm) {
        const activeCategory = document.querySelector('.category.active')?.textContent.trim() || 'Todas';
        document.querySelectorAll('.post-card').forEach(card => {
            const content = card.querySelector('.post-content p')?.textContent.toLowerCase() || '';
            const username = card.querySelector('.username')?.textContent.toLowerCase() || '';
            const category = card.dataset.category?.toLowerCase() || '';

            const searchCategoryMap = {
                'ia': 'i.a',
                'i.a': 'i.a',
                'banco de dados': 'banco de dados',
                'frontend': 'front-end',
                'front-end': 'front-end',
                'backend': 'back-end',
                'back-end': 'back-end',
                'programacao': 'programação',
                'carreiras': 'carreiras',
                'duvidas gerais': 'dúvidas gerais',
                'modelagem': 'modelagem',
                'modelagem de dados': 'modelagem a banco de dados',
                'modelagem a banco de dados': 'modelagem a banco de dados',
                'logica': 'lógica',
                'lógica': 'lógica',
                'processos': 'processos',
                'android': 'programação android',
                'programação android': 'programação android',
                'multidisciplinar': 'projeto multidisciplinar',
                'projeto multidisciplinar': 'projeto multidisciplinar',
                'redes': 'redes',
                'versionamento': 'versionamento'
            };

            const matchedCategory = searchCategoryMap[searchTerm.toLowerCase()] || searchTerm.toLowerCase();

            const matchesSearch = searchTerm === '' ||
                content.includes(searchTerm.toLowerCase()) ||
                username.includes(searchTerm.toLowerCase()) ||
                category.includes(matchedCategory);

            const matchesCategory = activeCategory === 'Todas' || card.dataset.category === activeCategory;

            if (matchesSearch && matchesCategory) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
    }

    function setupCategoryFilter() {
        if (!categories || categories.length === 0) return;

        categories.forEach(category => {
            category.addEventListener('click', function() {
                categories.forEach(c => c.classList.remove('active'));
                this.classList.add('active');

                const categoryName = this.textContent.trim();
                localStorage.setItem('activeCategory', categoryName);
                
                document.querySelectorAll('.post-card').forEach(card => {
                    const cardCategory = card.dataset.category?.trim() || '';
                    if (categoryName === 'Todas' || cardCategory === categoryName) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });

                // Limpa a pesquisa ao mudar de categoria
                if (searchInput) {
                    searchInput.value = '';
                    searchBar.classList.remove('search-active');
                }
                showNotification(`Filtrando por ${categoryName}`, 'success');
            });
        });
    }

    function setupPostForm() {
        if (!postForm || !postTextarea || !charCounter) return;

        postTextarea.addEventListener('input', function() {
            const maxLength = 500;
            const currentLength = this.value.length;
            charCounter.textContent = `${currentLength}/${maxLength}`;
            charCounter.classList.toggle('limit', currentLength > maxLength * 0.8);

            if (currentLength > maxLength) {
                this.value = this.value.substring(0, maxLength);
                charCounter.textContent = `${maxLength}/${maxLength}`;
                showNotification('Limite de caracteres atingido', 'error');
            }
        });

        // Adiciona animação ao seletor de categoria quando em foco
        if (categorySelect) {
            categorySelect.addEventListener('focus', function() {
                this.parentElement.classList.add('active');
            });
            
            categorySelect.addEventListener('blur', function() {
                this.parentElement.classList.remove('active');
            });
            
            categorySelect.addEventListener('change', function() {
                const selectedCategory = this.options[this.selectedIndex].text;
                showNotification(`Categoria selecionada: ${selectedCategory}`, 'info');
            });
        }

        postForm.addEventListener('submit', function(e) {
            if (postTextarea.value.trim() === '') {
                e.preventDefault();
                showNotification('Digite algo para publicar', 'error');
                postTextarea.focus();
                return;
            }
            
            // Verificação adicional para categoria
            if (categorySelect && categorySelect.value === '') {
                e.preventDefault();
                showNotification('Selecione uma categoria', 'error');
                categorySelect.focus();
                return;
            }
            
            showNotification('Postagem publicada com sucesso!', 'success');
        });
    }

    function setupDeleteButtons() {
        if (!deleteButtons || deleteButtons.length === 0) return;

        deleteButtons.forEach(button => {
            button.addEventListener('click', function() {
                const postId = this.dataset.postId;
                if (confirm('Tem certeza que deseja deletar esta postagem?')) {
                    fetch(`/delete_post/${postId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.status === 'success') {
                            document.querySelector(`.post-card[data-post-id="${postId}"]`).remove();
                            showNotification('Postagem deletada com sucesso!', 'success');
                        } else {
                            showNotification('Erro ao deletar postagem.', 'error');
                        }
                    })
                    .catch(() => {
                        showNotification('Erro ao conectar com o servidor.', 'error');
                    });
                }
            });
        });
    }

    function setupLikeButtons() {
        if (!likeButtons || likeButtons.length === 0) return;

        likeButtons.forEach(button => {
            button.addEventListener('click', function() {
                const postId = this.closest('.post-card').dataset.postId;
                const likeCountSpan = this.querySelector('.like-count');
                let likeCount = parseInt(likeCountSpan.textContent || '0');

                if (this.classList.contains('active')) {
                    likeCount--;
                    this.classList.remove('active');
                    localStorage.removeItem(`liked_${postId}`);
                    showNotification('Like removido', 'info');
                } else {
                    likeCount++;
                    this.classList.add('active');
                    localStorage.setItem(`liked_${postId}`, 'true');
                    showNotification('Postagem curtida!', 'success');
                }

                likeCountSpan.textContent = likeCount;
                localStorage.setItem(`likes_${postId}`, likeCount);
            });
        });
    }

    function setupCommentButtons() {
        if (!commentButtons || commentButtons.length === 0) return;

        commentButtons.forEach(button => {
            button.addEventListener('click', function() {
                const postCard = this.closest('.post-card');
                const commentSection = postCard.querySelector('.comment-section');
                if (commentSection) {
                    const isVisible = commentSection.style.display === 'block';
                    commentSection.style.display = isVisible ? 'none' : 'block';
                    
                    if (!isVisible) {
                        // Foca no textarea quando abre a seção de comentários
                        const textarea = commentSection.querySelector('.comment-textarea');
                        if (textarea) {
                            textarea.focus();
                        }
                    }
                }
            });
        });
    }

    function setupCommentForms() {
        const commentForms = document.querySelectorAll('.comment-form');
        if (!commentForms || commentForms.length === 0) return;

        commentForms.forEach(form => {
            const textarea = form.querySelector('.comment-textarea');
            const charCounter = form.querySelector('.char-counter');

            if (textarea && charCounter) {
                textarea.addEventListener('input', function() {
                    const maxLength = 500;
                    const currentLength = this.value.length;
                    charCounter.textContent = `${currentLength}/${maxLength}`;
                    charCounter.classList.toggle('limit', currentLength > maxLength * 0.8);

                    if (currentLength > maxLength) {
                        this.value = this.value.substring(0, maxLength);
                        charCounter.textContent = `${maxLength}/${maxLength}`;
                        showNotification('Limite de caracteres atingido', 'error');
                    }
                });
            }

            form.addEventListener('submit', function(e) {
                e.preventDefault();
                const postId = this.dataset.postId;
                const content = textarea?.value.trim() || '';

                if (!content) {
                    showNotification('O comentário não pode estar vazio', 'error');
                    if (textarea) textarea.focus();
                    return;
                }

                fetch(`/comment/${postId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({
                        'comment_content': content
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        const commentsList = form.nextElementSibling;
                        if (commentsList) {
                            const newComment = document.createElement('div');
                            newComment.className = 'comment';
                            newComment.dataset.commentId = data.comment.id;
                            newComment.innerHTML = `
                                <div class="user-info">
                                    <div class="avatar">
                                        <div class="avatar-initials bg-primary text-white rounded-circle d-flex justify-content-center align-items-center">
                                            ${data.comment.username[0].toUpperCase()}
                                        </div>
                                    </div>
                                    <div>
                                        <h6 class="username">${data.comment.username}</h6>
                                        <small class="text-muted">${data.comment.created_at}</small>
                                    </div>
                                </div>
                                <p>${data.comment.content}</p>
                            `;
                            commentsList.appendChild(newComment);
                            if (textarea) {
                                textarea.value = '';
                                if (charCounter) charCounter.textContent = '0/500';
                            }
                            showNotification('Comentário adicionado com sucesso!', 'success');
                        }
                    } else {
                        showNotification(data.message || 'Erro ao adicionar comentário', 'error');
                    }
                })
                .catch(() => {
                    showNotification('Erro ao conectar com o servidor.', 'error');
                });
            });
        });
    }

    function setupThemeSwitch() {
        // Verificar se o switch já existe
        let themeSwitch = document.querySelector('.theme-switch');
        
        // Se não existir, criar
        if (!themeSwitch) {
            themeSwitch = document.createElement('div');
            themeSwitch.classList.add('theme-switch');
            themeSwitch.innerHTML = '<i class="fas fa-moon"></i>';
            document.body.appendChild(themeSwitch);
        }

        // Aplicar tema salvo
        if (localStorage.getItem('theme') === 'dark') {
            document.body.classList.add('dark-theme');
            themeSwitch.innerHTML = '<i class="fas fa-sun"></i>';
        }

        themeSwitch.addEventListener('click', function() {
            document.body.classList.toggle('dark-theme');
            const isDark = document.body.classList.contains('dark-theme');
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
            themeSwitch.innerHTML = isDark ? '<i class="fas fa-sun"></i>' : '<i class="fas fa-moon"></i>';
            showNotification(isDark ? 'Tema escuro ativado' : 'Tema claro ativado', 'success');
        });
    }

    function setupDrawer() {
        if (!sideMenu) return;

        const drawerLinks = document.querySelectorAll('.offcanvas .nav-link');
        if (drawerLinks && drawerLinks.length > 0) {
            drawerLinks.forEach(link => {
                link.addEventListener('click', function() {
                    const bsOffcanvas = bootstrap.Offcanvas.getInstance(sideMenu);
                    if (bsOffcanvas) bsOffcanvas.hide();
                });
            });
        }

        document.addEventListener('click', function(event) {
            const isClickInsideDrawer = sideMenu.contains(event.target);
            const isClickOnToggler = event.target.closest('.menu-btn');
            const isOffcanvasOpen = sideMenu.classList.contains('show');

            if (!isClickInsideDrawer && !isClickOnToggler && isOffcanvasOpen) {
                const bsOffcanvas = bootstrap.Offcanvas.getInstance(sideMenu);
                if (bsOffcanvas) bsOffcanvas.hide();
            }
        });

        sideMenu.addEventListener('shown.bs.offcanvas', function() {
            document.body.style.overflow = 'hidden';
            document.body.style.paddingRight = '0';
            sideMenu.style.top = '0';
            sideMenu.style.height = '100vh';
        });

        sideMenu.addEventListener('hidden.bs.offcanvas', function() {
            document.body.style.overflow = '';
            document.body.style.paddingRight = '';
        });
    }

    // Função global para mostrar notificações
    window.showNotification = function(message, type) {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <div class="notification-message">${message}</div>
            </div>
            <button class="notification-close"><i class="fas fa-times"></i></button>
        `;
        document.body.appendChild(notification);

        setTimeout(() => notification.classList.add('show'), 100);

        notification.querySelector('.notification-close').addEventListener('click', () => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        });

        setTimeout(() => {
            if (notification.parentNode) {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }
        }, 4000);
    };
});




from flask import Flask, render_template, request, redirect, url_for, flash, session, jsonify
from werkzeug.security import generate_password_hash, check_password_hash
from backend.extensions import db
from backend.models import User, Post, Comment
from datetime import datetime
import os
import firebase_admin
from firebase_admin import auth, credentials
from flask_migrate import Migrate
import logging

# Configurar logging para depuração
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.config.from_object('backend.config.Config')
db.init_app(app)
migrate = Migrate(app, db)

# Criar pasta instance se não existir
instance_dir = app.config['INSTANCE_DIR']
if not os.path.exists(instance_dir):
    try:
        os.makedirs(instance_dir)
        logger.info(f"Pasta instance criada em: {instance_dir}")
    except Exception as e:
        logger.error(f"Erro ao criar pasta instance: {str(e)}")
        raise

# Log do caminho do banco de dados
logger.info(f"SQLALCHEMY_DATABASE_URI: {app.config['SQLALCHEMY_DATABASE_URI']}")

# Verificar permissões de escrita no diretório instance
try:
    test_file = os.path.join(instance_dir, 'test_write.txt')
    with open(test_file, 'w') as f:
        f.write('test')
    os.remove(test_file)
    logger.info(f"Permissões de escrita verificadas com sucesso em: {instance_dir}")
except Exception as e:
    logger.error(f"Erro de permissão no diretório instance: {str(e)}")
    raise

# Inicializar Firebase
try:
    cred = credentials.Certificate('technobug-6daca-firebase-adminsdk-fbsvc-19273e6f57.json')
    firebase_admin.initialize_app(cred)
    logger.info("Firebase inicializado com sucesso")
except Exception as e:
    logger.error(f"Erro ao inicializar Firebase: {str(e)}")

@app.route('/', methods=['GET', 'POST'])
def registroelogin():
    user_id = session.get('user_id')
    if user_id:
        user = db.session.get(User, user_id)
        if not user:
            session.clear()
        else:
            return redirect(url_for('telainicial'))
    
    if request.method == 'POST':
        if 'login' in request.form:
            email = request.form.get('email')
            password = request.form.get('password')
            
            if not email or not password:
                flash('Por favor, preencha todos os campos.', 'error')
                return redirect(url_for('registroelogin'))
            
            user = User.query.filter_by(email=email).first()
            if user and user.password and check_password_hash(user.password, password):
                session['user_id'] = user.id
                session['username'] = user.username
                flash(f'Bem-vindo de volta, {user.username}!', 'success')
                return redirect(url_for('telainicial'))
            else:
                flash('Email ou senha incorretos.', 'error')
                return redirect(url_for('registroelogin'))
                
        elif 'register' in request.form:
            username = request.form.get('username')
            email = request.form.get('email')
            password = request.form.get('password')
            confirm_password = request.form.get('confirm_password')
            
            if not username or not email or not password or not confirm_password:
                flash('Por favor, preencha todos os campos.', 'error')
                return redirect(url_for('registroelogin'))
                
            if password != confirm_password:
                flash('As senhas não coincidem.', 'error')
                return redirect(url_for('registroelogin'))
                
            existing_user = User.query.filter_by(email=email).first()
            if existing_user:
                flash('Este email já está em uso.', 'error')
                return redirect(url_for('registroelogin'))
                
            new_user = User(
                username=username,
                email=email,
                password=generate_password_hash(password)
            )
            try:
                db.session.add(new_user)
                db.session.commit()
                flash('Conta criada com sucesso! Faça login para continuar.', 'success')
            except Exception as e:
                db.session.rollback()
                logger.error(f"Erro ao criar usuário: {str(e)}")
                flash('Erro ao criar conta. Tente novamente.', 'error')
            
            return redirect(url_for('registroelogin'))
    
    return render_template('registroelogin.html')

@app.route('/verify-token', methods=['POST'])
def verify_token():
    id_token = request.json.get('idToken')
    try:
        decoded_token = auth.verify_id_token(id_token)
        email = decoded_token.get('email')
        username = decoded_token.get('name', email.split('@')[0])
        uid = decoded_token['uid']
        
        user = User.query.filter_by(email=email).first()
        if not user:
            user = User(
                username=username,
                email=email,
                password=''  # Sem senha para autenticação Google
            )
            try:
                db.session.add(user)
                db.session.commit()
                logger.info(f"Usuário {email} criado com sucesso")
            except Exception as e:
                db.session.rollback()
                logger.error(f"Erro ao criar usuário no banco: {str(e)}")
                return jsonify({'status': 'error', 'message': 'Erro ao criar usuário no banco de dados'}), 500
        
        session['user_id'] = user.id
        session['username'] = user.username
        
        return jsonify({'status': 'success', 'user': {'id': user.id, 'username': user.username, 'email': user.email}})
    except auth.ExpiredIdTokenError:
        logger.warning("Token expirado recebido")
        return jsonify({'status': 'error', 'message': 'Token expirado. Faça login novamente.'}), 401
    except Exception as e:
        logger.error(f"Erro ao verificar token: {str(e)}")
        return jsonify({'status': 'error', 'message': 'Erro ao verificar token'}), 401

@app.route('/videos-e-tutoriais')
def videos():
    user_id = session.get('user_id')
    if not user_id:
        flash('Por favor, faça login para acessar esta página.', 'error')
        return redirect(url_for('registroelogin'))
    
    user = db.session.get(User, user_id)
    if not user:
        session.clear()
        flash('Sua sessão expirou ou o usuário não existe mais.', 'error')
        return redirect(url_for('registroelogin'))
    
    return render_template('videosetutoriais.html', user=user)

@app.route('/materiais-de-estudo')
def materiais():
    user_id = session.get('user_id')
    if not user_id:
        flash('Por favor, faça login para acessar esta página.', 'error')
        return redirect(url_for('registroelogin'))
    
    user = db.session.get(User, user_id)
    if not user:
        session.clear()
        flash('Sua sessão expirou ou o usuário não existe mais.', 'error')
        return redirect(url_for('registroelogin'))
    
    return render_template('materiaisestudo.html', user=user)

@app.route('/pdfs-e-apostilas')
def pdfs():
    user_id = session.get('user_id')
    if not user_id:
        flash('Por favor, faça login para acessar esta página.', 'error')
        return redirect(url_for('registroelogin'))
    
    user = db.session.get(User, user_id)
    if not user:
        session.clear()
        flash('Sua sessão expirou ou o usuário não existe mais.', 'error')
        return redirect(url_for('registroelogin'))
    
    return render_template('pdfeapostilas.html', user=user)

@app.route('/codigo')
def codigo():
    user_id = session.get('user_id')
    if not user_id:
        flash('Por favor, faça login para acessar esta página.', 'error')
        return redirect(url_for('registroelogin'))
    
    user = db.session.get(User, user_id)
    if not user:
        session.clear()
        flash('Sua sessão expirou ou o usuário não existe mais.', 'error')
        return redirect(url_for('registroelogin'))
    
    return render_template('exemplosdecodigo.html', user=user)

@app.route('/telainicial', methods=['GET', 'POST'])
def telainicial():
    user_id = session.get('user_id')
    if not user_id:
        flash('Por favor, faça login para acessar esta página.', 'error')
        return redirect(url_for('registroelogin'))
    
    user = db.session.get(User, user_id)
    if not user:
        session.clear()
        flash('Sua sessão expirou ou o usuário não existe mais.', 'error')
        return redirect(url_for('registroelogin'))
    
    if request.method == 'POST':
        content = request.form.get('content')
        category = request.form.get('category')
        if content and category:
            new_post = Post(content=content, user_id=user.id, category=category)
            try:
                db.session.add(new_post)
                db.session.commit()
                flash('Postagem publicada com sucesso!', 'success')
            except Exception as e:
                db.session.rollback()
                logger.error(f"Erro ao criar postagem: {str(e)}")
                flash('Erro ao publicar postagem. Tente novamente.', 'error')
            return redirect(url_for('telainicial'))
    
    posts = Post.query.order_by(Post.created_at.desc()).all()
    
    return render_template('telainicial.html', user=user, posts=posts)

@app.route('/comment/<int:post_id>', methods=['POST'])
def add_comment(post_id):
    if 'user_id' not in session:
        return jsonify({'status': 'error', 'message': 'Por favor, faça login para comentar.'}), 401
    
    post = Post.query.get_or_404(post_id)
    content = request.form.get('comment_content')
    
    if not content:
        return jsonify({'status': 'error', 'message': 'O comentário não pode estar vazio.'}), 400
    
    new_comment = Comment(
        content=content,
        user_id=session['user_id'],
        post_id=post_id
    )
    
    try:
        db.session.add(new_comment)
        db.session.commit()
        return jsonify({
            'status': 'success',
            'comment': {
                'id': new_comment.id,
                'content': new_comment.content,
                'username': new_comment.author.username,
                'created_at': new_comment.created_at.strftime('%d/%m/%Y %H:%M')
            }
        })
    except Exception as e:
        db.session.rollback()
        logger.error(f"Erro ao adicionar comentário: {str(e)}")
        return jsonify({'status': 'error', 'message': 'Erro ao adicionar comentário.'}), 500
    


@app.route('/delete_post/<int:post_id>', methods=['POST'])
def delete_post(post_id):
    if 'user_id' not in session:
        return jsonify({'status': 'error', 'message': 'Por favor, faça login para realizar esta ação.'}), 401
    
    post = Post.query.get_or_404(post_id)
    
    if post.user_id != session['user_id']:
        return jsonify({'status': 'error', 'message': 'Você não tem permissão para deletar esta postagem.'}), 403
    
    try:
        db.session.delete(post)
        db.session.commit()
        return jsonify({'status': 'success', 'message': 'Postagem deletada com sucesso!'})
    except Exception as e:
        db.session.rollback()
        logger.error(f"Erro ao deletar postagem: {str(e)}")
        return jsonify({'status': 'error', 'message': 'Erro ao deletar postagem. Tente novamente.'}), 500

@app.route('/logout')
def logout():
    session.clear()
    flash('Você saiu da sua conta.', 'info')
    return redirect(url_for('registroelogin'))

with app.app_context():
    try:
        # Verificar se o diretório do banco de dados é acessível
        db_path = os.path.join(instance_dir, 'app.db')
        if not os.path.exists(instance_dir):
            logger.error(f"Diretório instance não encontrado: {instance_dir}")
            raise FileNotFoundError(f"Diretório instance não encontrado: {instance_dir}")
        
        # Tentar abrir o arquivo do banco de dados
        with open(db_path, 'a'):
            pass  # Apenas verificar se é possível criar/acessar o arquivo
        
        db.create_all()
        logger.info("Tabelas do banco de dados criadas com sucesso")
    except Exception as e:
        logger.error(f"Erro ao criar tabelas do banco de dados: {str(e)}")
        raise

if __name__ == '__main__':
    app.run(debug=True)



:root {
    --primary: #1a73e8;
    --primary-light: #4a91ff;
    --primary-dark: #1357b9;
    --primary-transparent: rgba(26, 115, 232, 0.1);
    --secondary: #202124;
    --secondary-light: #3c4043;
    --secondary-dark: #141517;
    --accent: #ff4444;
    --light: #ffffff;
    --light-gray: #f1f3f4;
    --medium-gray: #dadce0;
    --dark-gray: #80868b;
    --dark: #202124;
    --success: #34c759;
    --warning: #fbbc05;
    --danger: #ff4444;
    --font-primary: 'Inter', sans-serif;
    --font-secondary: 'Inter', sans-serif;
    --font-size-base: 1rem;
    --font-size-sm: 0.875rem;
    --font-size-lg: 1.25rem;
    --font-size-xl: 1.5rem;
    --font-size-xxl: 2rem;
    --font-size-hero: 3rem;
    --space-xs: 0.25rem;
    --space-sm: 0.5rem;
    --space-md: 1rem;
    --space-lg: 1.5rem;
    --space-xl: 2rem;
    --space-xxl: 3rem;
    --border-radius-sm: 0.375rem;
    --border-radius-md: 0.75rem;
    --border-radius-lg: 1rem;
    --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);
    --shadow-md: 0 3px 8px rgba(0, 0, 0, 0.12);
    --shadow-lg: 0 5px 15px rgba(0, 0, 0, 0.15);
    --transition-fast: 0.2s ease;
    --transition-normal: 0.3s ease;
    --primary-color: #1e293b;
    --secondary-color: #0ea5e9;
    --accent-color: #f97316;
    --text-color: #1e293b;
    --background-color: #f1f5f9;
    --card-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    --card-bg: #ffffff;
    --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    --gradient-bg: linear-gradient(135deg, #0ea5e9, #3b82f6);
}

*, *::before, *::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

html {
    font-size: 16px;
    scroll-behavior: smooth;
    overflow-x: hidden;
}

body {
    font-family: var(--font-primary);
    color: var(--text-color);
    background-color: var(--background-color);
    line-height: 1.7;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    margin: 0;
    padding: 0;
    overflow-x: hidden;
}

h1, h2, h3, h4, h5, h6 {
    font-family: var(--font-secondary);
    font-weight: 700;
    color: var(--secondary);
}

h1 { font-size: var(--font-size-hero); }
h2 { font-size: var(--font-size-xxl); }
h3 { font-size: var(--font-size-xl); }
h4 { font-size: var(--font-size-lg); }
h5 { font-size: var(--font-size-base); }
h6 { font-size: var(--font-size-sm); }

a {
    color: var(--primary);
    text-decoration: none;
    transition: color var(--transition-fast);
}

a:hover { color: var(--primary-dark); }

/* Header Styles */
.app-header {
    background: var(--gradient-bg);
    color: white;
    padding: 1.5rem 0;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    position: sticky;
    top: 0;
    z-index: 100;
    max-width: 100%;
    overflow-x: hidden;
}

.header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1280px;
    margin: 0 auto;
    padding: 0 2rem;
    position: relative;
    max-width: 100%;
}

.logo {
    display: flex;
    align-items: center;
    gap: 12px;
    font-weight: 700;
    font-size: 1.8rem;
    transition: opacity var(--transition-fast);
}

.logo i {
    font-size: 1.6rem;
}

.search-bar {
    position: relative;
    flex-grow: 1;
    max-width: 500px;
    margin: 0 2rem;
}

.search-bar input {
    width: 100%;
    padding: 12px 20px 12px 45px;
    border-radius: 50px;
    border: none;
    background-color: rgba(255, 255, 255, 0.2);
    color: white;
    font-size: 1rem;
    transition: var(--transition);
}

.search-bar input:focus {
    background-color: rgba(255, 255, 255, 0.3);
    outline: none;
}

.search-bar input::placeholder {
    color: rgba(255, 255, 255, 0.7);
}

.search-bar i {
    position: absolute;
    left: 16px;
    top: 50%;
    transform: translateY(-50%);
    color: white;
    font-size: 1.2rem;
    cursor: pointer;
}

/* Offcanvas Menu */
.offcanvas {
    width: 320px;
    box-shadow: var(--shadow-lg);
    background-color: var(--light);
    transition: transform var(--transition-normal);
    z-index: 1200;
    position: fixed;
    top: 0;
    height: 100vh;
}

.offcanvas-header {
    background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
    color: white;
    padding: var(--space-lg);
}

.offcanvas-title {
    font-weight: 700;
    font-size: var(--font-size-lg);
}



.btn-close {
    filter: brightness(0) invert(1);
}

.offcanvas-body {
    padding: var(--space-lg);
    overflow-y: auto;
}

.nav-link {
    padding: var(--space-md) var(--space-lg);
    color: var(--secondary);
    border-radius: var(--border-radius-sm);
    font-size: var(--font-size-base);
    font-weight: 500;
    transition: background-color var(--transition-fast), color var(--transition-fast), transform var(--transition-fast);
    display: flex;
    align-items: center;
}



.nav-link:hover {
    background-color: var(--primary-transparent);
    color: var(--primary);
    transform: translateX(5px);
}

.nav-link.active {
    background-color: var(--primary);
    color: white;
    transform: translateX(5px);
}

.nav-link i {
    margin-right: var(--space-md);
}

.navbar-nav .nav-item {
    margin-bottom: var(--space-sm);
}

.user-profile .avatar-initials {
    width: 50px;
    height: 50px;
    font-size: var(--font-size-lg);
    font-weight: 600;
}

/* Category Navigation */
.category-nav {
    padding: 1.5rem 0;
    position: sticky;
    top: 90px;
    background-color: var(--background-color);
    z-index: 90;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    max-width: 100%;
    overflow-x: hidden;
}

.categories-wrapper {
    max-width: 1280px;
    margin: 0 auto;
    padding: 0 2rem;
    max-width: 100%;
}

.categories {
    display: flex;
    gap: 10px;
    overflow-x: auto;
    padding-bottom: 10px;
    scroll-behavior: smooth;
    scrollbar-width: none;
    max-width: 100%;
}

.categories::-webkit-scrollbar {
    display: none;
}

.category {
    padding: 10px 20px;
    background-color: white;
    color: var(--text-color);
    border-radius: 50px;
    white-space: nowrap;
    font-weight: 500;
    cursor: pointer;
    border: 1px solid #e2e8f0;
    transition: var(--transition);
    font-size: 0.95rem;
}

.category.active {
    background-color: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
}

.category:hover:not(.active) {
    background-color: #f8fafc;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

/* Main Content */
.container {
    max-width: 1280px;
    margin: 0 auto;
    padding: 2rem;
    max-width: 100%;
}

.main-content {
    margin-top: 2rem;
    max-width: 100%;
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
}

.section-title {
    font-size: 1.8rem;
    font-weight: 700;
    color: var(--primary-color);
    margin: 0;
    display: flex;
    align-items: center;
    gap: 12px;
}

.section-title i {
    color: var(--accent-color);
}

/* Post Creation Card */
.post-creation-card {
    background-color: var(--card-bg);
    border-radius: 12px;
    box-shadow: var(--card-shadow);
    padding: 1.5rem;
    margin-bottom: 2rem;
}

.post-creation-card .form-control {
    border: 1px solid var(--medium-gray);
    border-radius: var(--border-radius-sm);
    padding: var(--space-md);
    font-size: var(--font-size-base);
    transition: border-color var(--transition-fast), box-shadow var(--transition-fast);
    resize: none;
}

.post-creation-card .form-control:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 3px var(--primary-transparent);
}

.post-creation-card .char-counter {
    position: absolute;
    bottom: 15px;
    right: 15px;
    font-size: var(--font-size-sm);
    color: var(--dark-gray);
}

.post-creation-card .char-counter.limit {
    color: var(--danger);
}

.post-creation-card .btn-publish {
    background-color: var(--primary);
    border-color: var(--primary);
    padding: var(--space-md) var(--space-xl);
    border-radius: var(--border-radius-sm);
    font-weight: 600;
    transition: background-color var(--transition-fast), transform var(--transition-fast);
}

.post-creation-card .btn-publish:hover {
    background-color: var(--primary-dark);
    border-color: var(--primary-dark);
    transform: translateY(-2px);
}

.category-selector .form-select {
    border-radius: var(--border-radius-sm);
    padding: var(--space-sm) var(--space-md);
    font-size: var(--font-size-sm);
    max-width: 200px;
}

/* Post Grid */
.post-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 25px;
    max-width: 100%;
}

.post-card {
    background-color: var(--card-bg);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: var(--card-shadow);
    transition: var(--transition);
    position: relative;
    max-width: 100%;
}

.post-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 12px 30px rgba(0, 0, 0, 0.15);
}

.post-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.25rem;
    border-bottom: 1px solid var(--medium-gray);
}

.user-info {
    display: flex;
    align-items: center;
    gap: 12px;
}

.avatar-initials {
    width: 40px;
    height: 40px;
    font-size: var(--font-size-base);
    font-weight: 600;
}

.username {
    font-size: var(--font-size-base);
    font-weight: 600;
    color: var(--primary-color);
    margin: 0;
}

.post-actions .btn {
    padding: 6px 12px;
}

.post-content {
    padding: 1.25rem;
}

.post-category-tag {
    display: inline-block;
    background-color: var(--accent-color);
    color: white;
    padding: 4px 12px;
    border-radius: 50px;
    font-size: 0.75rem;
    font-weight: 600;
    margin-bottom: 12px;
}

.post-content p {
    font-size: 0.9rem;
    color: #64748b;
    display: -webkit-box;
    -webkit-line-clamp: 4;
    -webkit-box-orient: vertical;
    overflow: hidden;
    margin-bottom: 0;
}

.post-footer {
    padding: 1rem 1.25rem;
    border-top: 1px solid var(--medium-gray);
    display: flex;
    gap: 12px;
}

.post-footer .btn {
    font-size: 0.85rem;
    padding: 6px 12px;
}

.like-btn.active {
    background-color: var(--primary);
    color: white;
    border-color: var(--primary);
}

/* Empty State Card */
.empty-state-card {
    background-color: var(--card-bg);
    border-radius: 12px;
    box-shadow: var(--card-shadow);
    text-align: center;
}

/* Footer Styles */
.app-footer {
    background-color: var(--primary-color);
    color: white;
    padding: 3rem 0;
    margin-top: auto;
    max-width: 100%;
}

.footer-content {
    max-width: 1280px;
    margin: 0 auto;
    padding: 0 2rem;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 3rem;
    max-width: 100%;
}

.footer-column h3 {
    font-size: 1.2rem;
    margin-bottom: 1.5rem;
    position: relative;
    padding-bottom: 10px;
}

.footer-column h3::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: 0;
    width: 40px;
    height: 3px;
    background-color: var(--accent-color);
}

.footer-links {
    list-style: none;
    padding: 0;
    margin: 0;
}

.footer-links li {
    margin-bottom: 12px;
}

.footer-links a {
    color: #cbd5e1;
    text-decoration: none;
    transition: var(--transition);
    display: flex;
    align-items: center;
    gap: 8px;
}

.footer-links a:hover {
    color: white;
}

.footer-bottom {
    max-width: 1280px;
    margin: 0 auto;
    padding: 1.5rem 2rem 0;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    margin-top: 2rem;
    text-align: center;
    font-size: 0.9rem;
    color: #94a3b8;
    max-width: 100%;
}

/* Responsive Design */
@media (max-width: 1400px) {
    .container { max-width: 1140px; }
}

@media (max-width: 1200px) {
    .container { max-width: 960px; }
    .logo { font-size: 1.6rem; }
}

@media (max-width: 992px) {
    .container { max-width: 720px; }
    .header-content {
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        position: relative;
        max-width: 100%;
    }
    .logo {
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        font-size: 1.4rem;
    }
    .search-bar.search-active + .logo {
        display: none;
    }
    .search-bar {
        max-width: unset;
        margin: 0;
        order: -1;
        position: relative;
    }
    .search-bar input {
        display: none;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        max-width: 200px;
        width: 100%;
        padding: 8px 15px 8px 36px;
        z-index: 101;
        border-radius: var(--border-radius-md);
        background-color: rgba(255, 255, 255, 0.95);
        color: var(--text-color);
        box-shadow: var(--shadow-md);
        transition: opacity var(--transition-fast), transform var(--transition-fast);
        opacity: 0;
        transform: translate(-50%, -40%);
    }
    .search-bar.search-active input {
        display: block;
        opacity: 1;
        transform: translate(-50%, -50%);
    }
    .search-bar input::placeholder {
        color: var(--dark-gray);
    }
    .search-bar i {
        position: static;
        transform: none;
        font-size: 1.2rem;
        cursor: pointer;
        padding: var(--space-sm);
    }
    .search-bar.search-active i {
        position: absolute;
        left: calc(50% - 94px);
        top: 50%;
        transform: translateY(-50%);
        color: var(--text-color);
        z-index: 102;
    }
    .menu-btn {
        order: 1;
    }
    .offcanvas { width: 280px; }
}

@media (max-width: 768px) {
    .container { max-width: 540px; padding: var(--space-md); }
    .logo { font-size: 1.4rem; }
    .post-grid {
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
    .section-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
    }
}

@media (max-width: 576px) {
    .container { max-width: 100%; padding: var(--space-sm); }
    .logo { font-size: 1.2rem; }
    .post-grid { grid-template-columns: 1fr; }
    .categories { gap: 8px; }
    .category { padding: 8px 16px; font-size: 0.85rem; }
}

ao selecionar umna das categorias nao etsa mostrando, antes estava normalmente, agoar anao mais, coprrija isso por favor, foi alguma alteraçãoi no html ou no css oy algo do tipo, mande os arquivos interiros completos corrgidos
