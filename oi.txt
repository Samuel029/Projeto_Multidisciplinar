quero que a perte de categorias volte a ser como antes no telainical.html e no html de comanterios fique como o header de tela inicial 


post_comments.html <!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TechNoBug - Comentários</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/post_comments.css') }}">
</head>
<body>
    <!-- Header -->
    <header class="app-header">
        <div class="header-content">
            <div class="search-bar">
                <i class="fas fa-search"></i>
                <input type="text" placeholder="Pesquisar postagens, tópicos...">
            </div>
            <div class="logo">
                <i class="fas fa-graduation-cap"></i>
                <span>TechNoBug</span>
            </div>
            <button class="btn menu-btn" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasMenu" aria-controls="offcanvasMenu">
                <i class="fas fa-bars"></i>
                <span>Menu</span>
            </button>
        </div>
    </header>

    <!-- Offcanvas Menu -->
    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasMenu" aria-labelledby="offcanvasMenuLabel">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="offcanvasMenuLabel">Menu</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <div class="user-profile mb-4">
                <div class="d-flex align-items-center">
                    <div class="avatar me-3">
                        <div class="avatar-initials bg-primary text-white rounded-circle d-flex justify-content-center align-items-center">
                            {{ user.username[0]|upper }}
                        </div>
                    </div>
                    <div>
                        <h6 class="mb-0">{{ user.username }}</h6>
                        <small class="text-muted">{{ user.email }}</small>
                    </div>
                </div>
            </div>
            <ul class="navbar-nav">
                <li class="nav-item mb-2"><a class="nav-link active" href="{{ url_for('telainicial') }}"><i class="fas fa-home me-2"></i>Página Inicial</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="{{ url_for('materiais') }}"><i class="fas fa-book me-2"></i>Materiais de Estudo</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="{{ url_for('pdfs') }}"><i class="fas fa-file-pdf me-2"></i>PDFs e Apostilas</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="{{ url_for('videos') }}"><i class="fas fa-video me-2"></i>Vídeos e Tutoriais</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="{{ url_for('codigo') }}"><i class="fas fa-code me-2"></i>Exemplos de Código</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="#"><i class="fas fa-users me-2"></i>Comunidade</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="#"><i class="fas fa-cog me-2"></i>Configurações</a></li>
                <li class="nav-item"><a class="nav-link text-danger" href="{{ url_for('logout') }}"><i class="fas fa-sign-out-alt me-2"></i>Sair</a></li>
            </ul>
        </div>
    </div>

    <!-- Main Content -->
    <div class="container">
        <main class="main-content">
            <!-- Post Details -->
            <div class="post-card" data-post-id="{{ post.id }}" data-category="{{ post.category }}">
                <div class="post-header">
                    <div class="user-info">
                        <div class="avatar">
                            <div class="avatar-initials bg-primary text-white rounded-circle d-flex justify-content-center align-items-center">
                                {{ post.author.username[0]|upper }}
                            </div>
                        </div>
                        <div>
                            <h5 class="username">{{ post.author.username }}</h5>
                            <small class="text-muted">{{ post.created_at.strftime('%d/%m/%Y %H:%M') }}</small>
                        </div>
                    </div>
                    {% if post.user_id == user.id %}
                        <div class="post-actions">
                            <button class="btn btn-sm btn-danger delete-post" data-post-id="{{ post.id }}">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    {% endif %}
                </div>
                <div class="post-content">
                    <div class="post-category-tag">{{ post.category }}</div>
                    <p>{{ post.content }}</p>
                </div>
                <div class="post-footer">
                    <button class="btn btn-sm btn-outline-primary like-btn" data-post-id="{{ post.id }}">
                        <i class="fas fa-thumbs-up"></i> <span class="like-count">0</span>
                    </button>
                    <a href="{{ url_for('telainicial') }}" class="btn btn-sm btn-outline-secondary close-comments">
                        <i class="fas fa-times"></i> Fechar
                    </a>
                </div>
            </div>

            <!-- Comment Section -->
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-comments"></i>
                    <span>Comentários</span>
                </h2>
            </div>
            <div class="post-creation-card">
                <form class="comment-form" data-post-id="{{ post.id }}">
                    <div class="mb-3 position-relative">
                        <textarea class="form-control" name="comment_content" rows="3" placeholder="Escreva seu comentário..." required></textarea>
                        <div class="char-counter">0/500</div>
                    </div>
                    <button type="submit" class="btn btn-sm btn-primary">Enviar Comentário</button>
                </form>
            </div>
            <div class="comments-list">
                {% if post.comments %}
                    {% for comment in post.comments %}
                        <div class="comment" data-comment-id="{{ comment.id }}">
                            <div class="d-flex">
                                <div class="avatar me-2">
                                    <div class="avatar-initials bg-primary text-white rounded-circle d-flex justify-content-center align-items-center">
                                        {{ comment.author.username[0]|upper }}
                                    </div>
                                </div>
                                <div>
                                    <h6 class="mb-0">{{ comment.author.username }}</h6>
                                    <small class="text-muted">{{ comment.created_at.strftime('%d/%m/%Y %H:%M') }}</small>
                                    <p class="mb-1">{{ comment.content }}</p>
                                    <button class="btn btn-sm btn-outline-primary comment-like-btn" data-comment-id="{{ comment.id }}">
                                        <i class="fas fa-thumbs-up"></i> <span class="like-count">0</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    {% endfor %}
                {% else %}
                    <div class="empty-state-card">
                        <div class="text-center py-3">
                            <i class="fas fa-comment-slash fa-2x mb-2 text-muted"></i>
                            <p class="text-muted">Nenhum comentário ainda. Seja o primeiro a comentar!</p>
                        </div>
                    </div>
                {% endif %}
            </div>
        </main>
    </div>

    <!-- Footer -->
    <footer class="app-footer">
        <div class="footer-content">
            <div class="footer-column">
                <h3>Sobre Nós</h3>
                <ul class="footer-links">
                    <li><a href="#"><i class="fas fa-info-circle"></i> Nossa Missão</a></li>
                    <li><a href="#"><i class="fas fa-users"></i> Equipe</a></li>
                    <li><a href="#"><i class="fas fa-building"></i> Parceiros</a></li>
                    <li><a href="#"><i class="fas fa-newspaper"></i> Blog</a></li>
                </ul>
            </div>
            <div class="footer-column">
                <h3>Recursos</h3>
                <ul class="footer-links">
                    <li><a href="#"><i class="fas fa-book"></i> Biblioteca</a></li>
                    <li><a href="#"><i class="fas fa-code"></i> Projetos</a></li>
                    <li><a href="#"><i class="fas fa-certificate"></i> Certificações</a></li>
                    <li><a href="#"><i class="fas fa-download"></i> Downloads</a></li>
                </ul>
            </div>
            <div class="footer-column">
                <h3>Comunidade</h3>
                <ul class="footer-links">
                    <li><a href="#"><i class="fas fa-comments"></i> Fórum</a></li>
                    <li><a href="#"><i class="fas fa-chalkboard-teacher"></i> Webinars</a></li>
                    <li><a href="#"><i class="fas fa-handshake"></i> Programas de Mentoria</a></li>
                    <li><a href="#"><i class="fas fa-laptop-code"></i> Hackathons</a></li>
                </ul>
            </div>
            <div class="footer-column">
                <h3>Contato</h3>
                <ul class="footer-links">
                    <li><a href="#"><i class="fas fa-envelope"></i> Suporte</a></li>
                    <li><a href="#"><i class="fas fa-headset"></i> Fale Conosco</a></li>
                    <li><a href="#"><i class="fas fa-map-marker-alt"></i> Localização</a></li>
                    <li><a href="#"><i class="fas fa-question-circle"></i> FAQ</a></li>
                </ul>
            </div>
        </div>
        <div class="footer-bottom">
            <p>© 2025 TechNoBug. Todos os direitos reservados.</p>
        </div>
    </footer>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/post_comments.js') }}"></script>
</body>
</html>





css de post comments /* Reset e estilos base */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Inter', sans-serif;
    background-color: #f5f7fb;
    color: #333;
}

/* Header */
.app-header {
    background-color: #fff;
    border-bottom: 1px solid #dee2e6;
    padding: 0.5rem 1rem;
    position: sticky;
    top: 0;
    z-index: 1000;
}

.header-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    max-width: 1200px;
    margin: 0 auto;
}

.logo {
    display: flex;
    align-items: center;
    font-size: 1.5rem;
    font-weight: 600;
}

.logo i {
    margin-right: 0.5rem;
    color: #007bff;
}

.search-bar {
    display: flex;
    align-items: center;
    background-color: #f1f3f5;
    border-radius: 20px;
    padding: 0.5rem 1rem;
    width: 40%;
    transition: all 0.3s ease;
}

.search-bar i {
    color: #6c757d;
    margin-right: 0.5rem;
}

.search-bar input {
    border: none;
    background: none;
    outline: none;
    width: 100%;
    font-size: 0.9rem;
}

.search-bar.search-active {
    width: 100%;
}

.menu-btn {
    display: flex;
    align-items: center;
    padding: 0.5rem 1rem;
}

.menu-btn i {
    margin-right: 0.5rem;
}

/* Offcanvas Menu */
.offcanvas {
    width: 300px !important;
}

.user-profile .avatar-initials {
    width: 40px;
    height: 40px;
    font-size: 1.2rem;
}

.nav-link {
    color: #333;
    font-size: 1rem;
    padding: 0.5rem 0;
}

.nav-link:hover {
    color: #007bff;
}

/* Main Content */
.container {
    max-width: 800px;
    margin: 0 auto;
    padding: 1rem;
}

.main-content {
    margin-top: 1rem;
}

.section-header {
    margin-bottom: 1.5rem;
}

.section-title {
    display: flex;
    align-items: center;
    font-size: 1.5rem;
    font-weight: 600;
}

.section-title i {
    margin-right: 0.5rem;
    color: #007bff;
}

/* Post Card */
.post-card {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    margin-bottom: 1.5rem;
    padding: 1rem;
}

.post-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
}

.user-info {
    display: flex;
    align-items: center;
}

.avatar {
    width: 40px;
    height: 40px;
    margin-right: 0.75rem;
}

.avatar-initials {
    width: 100%;
    height: 100%;
    font-size: 1.2rem;
}

.username {
    font-size: 1.1rem;
    font-weight: 500;
    margin-bottom: 0;
}

.post-content {
    margin-bottom: 1rem;
}

.post-category-tag {
    display: inline-block;
    background-color: #e9ecef;
    color: #495057;
    padding: 0.2rem 0.5rem;
    border-radius: 4px;
    font-size: 0.85rem;
    margin-bottom: 0.5rem;
}

.post-footer {
    display: flex;
    gap: 0.5rem;
}

.like-btn, .comment-btn, .close-comments {
    font-size: 0.9rem;
}

.like-btn.active {
    color: #007bff;
    border-color: #007bff;
}

.close-comments {
    margin-left: auto;
}

/* Comment Section */
.comments-list {
    background-color: #f8f9fa;
    border-radius: 8px;
    padding: 1rem;
    margin-top: 1rem;
}

.comment {
    padding: 0.5rem 0;
    border-bottom: 1px solid #dee2e6;
}

.comment:last-child {
    border-bottom: none;
}

.comment .avatar {
    width: 32px;
    height: 32px;
}

.comment .avatar-initials {
    font-size: 1rem;
}

.comment h6 {
    font-size: 0.95rem;
}

.comment p {
    font-size: 0.9rem;
}

.comment-like-btn.liked {
    color: #007bff;
    border-color: #007bff;
}

/* Comment Form */
.post-creation-card {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    padding: 1rem;
    margin-bottom: 1.5rem;
}

.comment-form textarea {
    resize: vertical;
    min-height: 80px;
}

.empty-state-card {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    padding: 1rem;
}

/* Footer */
.app-footer {
    background-color: #fff;
    border-top: 1px solid #dee2e6;
    padding: 2rem 1rem;
    margin-top: 2rem;
}

.footer-content {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    max-width: 1200px;
    margin: 0 auto;
}

.footer-column {
    flex: 1;
    min-width: 200px;
    margin-bottom: 1rem;
}

.footer-column h3 {
    font-size: 1.2rem;
    margin-bottom: 1rem;
}

.footer-links li {
    list-style: none;
    margin-bottom: 0.5rem;
}

.footer-links a {
    color: #333;
    text-decoration: none;
    display: flex;
    align-items: center;
}

.footer-links a:hover {
    color: #007bff;
}

.footer-links i {
    margin-right: 0.5rem;
}

.footer-bottom {
    text-align: center;
    margin-top: 1rem;
    color: #6c757d;
}

/* Notifications */
.notification {
    position: fixed;
    top: 20px;
    right: 20px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    padding: 1rem;
    display: flex;
    align-items: center;
    opacity: 0;
    transition: opacity 0.3s ease, top 0.3s ease;
    z-index: 2000;
}

.notification.show {
    opacity: 1;
    top: 20px;
}

.notification-success {
    border-left: 4px solid #28a745;
}

.notification-error {
    border-left: 4px solid #dc3545;
}

.notification-info {
    border-left: 4px solid #17a2b8;
}

.notification-content {
    flex-grow: 1;
}

.notification-close {
    background: none;
    border: none;
    cursor: pointer;
    margin-left: 1rem;
    color: #6c757d;
}

/* Responsividade */
@media (max-width: 992px) {
    .header-content {
        flex-wrap: wrap;
    }

    .search-bar {
        order: 1;
        width: 100%;
        margin: 0.5rem 0;
        display: none;
    }

    .search-bar.search-active {
        display: flex;
    }

    .logo {
        order: 0;
        flex: 1;
    }

    .menu-btn {
        order: 2;
    }
}

@media (max-width: 576px) {
    .container {
        padding: 0.5rem;
    }

    .post-card {
        padding: 0.75rem;
    }

    .section-title {
        font-size: 1.2rem;
    }

    .footer-content {
        flex-direction: column;
    }
}



js de post comments

document.addEventListener('DOMContentLoaded', function() {
    // Elementos da interface
    const searchBar = document.querySelector('.search-bar');
    const searchInput = document.querySelector('.search-bar input');
    const searchIcon = document.querySelector('.search-bar i');
    const commentForm = document.querySelector('.comment-form');
    const commentTextarea = document.querySelector('textarea[name="comment_content"]');
    const charCounter = document.querySelector('.char-counter');
    const likeButton = document.querySelector('.like-btn');
    const commentLikeButtons = document.querySelectorAll('.comment-like-btn');
    const deleteButton = document.querySelector('.delete-post');
    const sideMenu = document.getElementById('offcanvasMenu');
    const closeCommentsButton = document.querySelector('.close-comments');

    // Inicializa componentes
    initializeComponents();

    // Configura eventos
    setupSearchBar();
    setupCommentForm();
    setupLikeButton();
    setupCommentLikeButtons();
    setupDeleteButton();
    setupDrawer();

    function initializeComponents() {
        // Carrega likes para o post
        if (likeButton) {
            const postId = likeButton.dataset.postId;
            fetch(`/get_post_likes/${postId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    likeButton.querySelector('.like-count').textContent = data.like_count;
                    if (data.user_liked) {
                        likeButton.classList.add('active');
                    }
                }
            })
            .catch(error => console.error('Error fetching post likes:', error));
        }

        // Carrega likes para comentários
        commentLikeButtons.forEach(btn => {
            const commentId = btn.getAttribute('data-comment-id');
            fetch(`/get_comment_likes/${commentId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    btn.querySelector('.like-count').textContent = data.like_count;
                    if (data.user_liked) {
                        btn.classList.add('liked');
                    }
                }
            })
            .catch(error => console.error('Error fetching comment likes:', error));
        });

        // Inicializa o contador de caracteres para o formulário de comentários
        if (commentTextarea && charCounter) {
            commentTextarea.dispatchEvent(new Event('input'));
        }
    }

    function normalizeText(text) {
        return text
            .toLowerCase()
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '')
            .replace(/\s+/g, ' ')
            .trim();
    }

    function setupSearchBar() {
        if (!searchBar || !searchInput || !searchIcon) return;

        // Toggle da barra de pesquisa em dispositivos móveis
        searchIcon.addEventListener('click', function(event) {
            if (window.innerWidth <= 992) {
                searchBar.classList.toggle('search-active');
                if (searchBar.classList.contains('search-active')) {
                    searchInput.focus();
                    searchInput.value = '';
                } else {
                    searchInput.blur();
                    searchInput.value = '';
                }
                event.stopPropagation();
            }
        });

        // Fecha a barra de pesquisa ao clicar fora
        document.addEventListener('click', function(event) {
            if (window.innerWidth <= 992 && !searchBar.contains(event.target)) {
                searchBar.classList.remove('search-active');
                searchInput.value = '';
            }
        });

        searchBar.addEventListener('click', function(event) {
            event.stopPropagation();
        });

        // Redireciona para a tela inicial com o termo de pesquisa
        searchInput.addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                const searchTerm = this.value.trim();
                if (searchTerm) {
                    window.location.href = `/telainicial?search=${encodeURIComponent(searchTerm)}`;
                } else {
                    window.location.href = '/telainicial';
                }
            }
        });
    }

    function setupCommentForm() {
        if (!commentForm || !commentTextarea || !charCounter) return;

        // Configura o contador de caracteres
        commentTextarea.addEventListener('input', function() {
            const maxLength = 500;
            const currentLength = this.value.length;
            charCounter.textContent = `${currentLength}/${maxLength}`;
            charCounter.classList.toggle('limit', currentLength > maxLength * 0.8);

            if (currentLength > maxLength) {
                this.value = this.value.substring(0, maxLength);
                charCounter.textContent = `${maxLength}/${maxLength}`;
                showNotification('Limite de caracteres atingido', 'error');
            }
        });

        commentForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const content = commentTextarea.value.trim();
            const postId = commentForm.dataset.postId;

            if (!content) {
                showNotification('O comentário não pode estar vazio', 'error');
                commentTextarea.focus();
                return;
            }

            const submitButton = commentForm.querySelector('button[type="submit"]');
            if (submitButton) {
                submitButton.disabled = true;
                submitButton.textContent = 'Enviando...';
            }

            fetch(`/comment/${postId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: new URLSearchParams({
                    'comment_content': content
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    const commentsList = document.querySelector('.comments-list');
                    if (commentsList) {
                        const emptyState = commentsList.querySelector('.empty-state-card');
                        if (emptyState) {
                            emptyState.remove();
                        }
                        const newComment = document.createElement('div');
                        newComment.className = 'comment';
                        newComment.dataset.commentId = data.comment.id;
                        newComment.innerHTML = `
                            <div class="d-flex">
                                <div class="avatar me-2">
                                    <div class="avatar-initials bg-primary text-white rounded-circle d-flex justify-content-center align-items-center">
                                        ${data.comment.username[0].toUpperCase()}
                                    </div>
                                </div>
                                <div>
                                    <h6 class="mb-0">${data.comment.username}</h6>
                                    <small class="text-muted">${data.comment.created_at}</small>
                                    <p class="mb-1">${data.comment.content}</p>
                                    <button class="btn btn-sm btn-outline-primary comment-like-btn" data-comment-id="${data.comment.id}">
                                        <i class="fas fa-thumbs-up"></i> <span class="like-count">0</span>
                                    </button>
                                </div>
                            </div>
                        `;
                        commentsList.prepend(newComment);
                        commentTextarea.value = '';
                        charCounter.textContent = '0/500';
                        showNotification('Comentário adicionado com sucesso!', 'success');

                        // Inicializa o botão de like para o novo comentário
                        const newButton = newComment.querySelector('.comment-like-btn');
                        newButton.addEventListener('click', function() {
                            fetch(`/like_comment/${data.comment.id}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.status === 'success') {
                                    newButton.querySelector('.like-count').textContent = data.like_count;
                                    if (data.liked) {
                                        newButton.classList.add('liked');
                                        showNotification('Comentário curtido!', 'success');
                                    } else {
                                        newButton.classList.remove('liked');
                                        showNotification('Like removido', 'info');
                                    }
                                } else {
                                    showNotification(data.message || 'Erro ao curtir comentário.', 'error');
                                }
                            })
                            .catch(() => {
                                showNotification('Erro ao conectar com o servidor.', 'error');
                            });
                        });
                    }
                } else {
                    showNotification(data.message || 'Erro ao adicionar comentário', 'error');
                }
            })
            .catch(() => {
                showNotification('Erro ao conectar com o servidor.', 'error');
            })
            .finally(() => {
                if (submitButton) {
                    submitButton.disabled = false;
                    submitButton.textContent = 'Enviar Comentário';
                }
            });
        });
    }

    function setupLikeButton() {
        if (!likeButton) return;

        likeButton.addEventListener('click', function() {
            const postId = this.dataset.postId;
            fetch(`/like_post/${postId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    this.querySelector('.like-count').textContent = data.like_count;
                    if (data.liked) {
                        this.classList.add('active');
                        showNotification('Postagem curtida!', 'success');
                    } else {
                        this.classList.remove('active');
                        showNotification('Like removido', 'info');
                    }
                } else {
                    showNotification(data.message || 'Erro ao curtir postagem.', 'error');
                }
            })
            .catch(() => {
                showNotification('Erro ao conectar com o servidor.', 'error');
            });
        });
    }

    function setupCommentLikeButtons() {
        if (!commentLikeButtons || commentLikeButtons.length === 0) return;

        commentLikeButtons.forEach(button => {
            button.addEventListener('click', function() {
                const commentId = this.getAttribute('data-comment-id');
                fetch(`/like_comment/${commentId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        this.querySelector('.like-count').textContent = data.like_count;
                        if (data.liked) {
                            this.classList.add('liked');
                            showNotification('Comentário curtido!', 'success');
                        } else {
                            this.classList.remove('liked');
                            showNotification('Like removido', 'info');
                        }
                    } else {
                        showNotification(data.message || 'Erro ao curtir comentário.', 'error');
                    }
                })
                .catch(() => {
                    showNotification('Erro ao conectar com o servidor.', 'error');
                });
            });
        });
    }

    function setupDeleteButton() {
        if (!deleteButton) return;

        deleteButton.addEventListener('click', function() {
            const postId = this.dataset.postId;
            if (confirm('Tem certeza que deseja deletar esta postagem?')) {
                fetch(`/delete_post/${postId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        showNotification('Postagem deletada com sucesso!', 'success');
                        setTimeout(() => {
                            window.location.href = '/telainicial';
                        }, 1000);
                    } else {
                        showNotification('Erro ao deletar postagem.', 'error');
                    }
                })
                .catch(() => {
                    showNotification('Erro ao conectar com o servidor.', 'error');
                });
            }
        });
    }

    function setupDrawer() {
        if (!sideMenu) return;

        const drawerLinks = document.querySelectorAll('.offcanvas .nav-link');
        if (drawerLinks && drawerLinks.length > 0) {
            drawerLinks.forEach(link => {
                link.addEventListener('click', function() {
                    const bsOffcanvas = bootstrap.Offcanvas.getInstance(sideMenu);
                    if (bsOffcanvas) bsOffcanvas.hide();
                });
            });
        }

        document.addEventListener('click', function(event) {
            const isClickInsideDrawer = sideMenu.contains(event.target);
            const isClickOnToggler = event.target.closest('.menu-btn');
            const isOffcanvasOpen = sideMenu.classList.contains('show');

            if (!isClickInsideDrawer && !isClickOnToggler && isOffcanvasOpen) {
                const bsOffcanvas = bootstrap.Offcanvas.getInstance(sideMenu);
                if (bsOffcanvas) bsOffcanvas.hide();
            }
        });

        sideMenu.addEventListener('shown.bs.offcanvas', function() {
            document.body.style.overflow = 'hidden';
            document.body.style.paddingRight = '0';
            sideMenu.style.top = '0';
            sideMenu.style.height = '100vh';
        });

        sideMenu.addEventListener('hidden.bs.offcanvas', function() {
            document.body.style.overflow = '';
            document.body.style.paddingRight = '';
        });
    }

    // Função global para mostrar notificações
    window.showNotification = function(message, type) {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <div class="notification-message">${message}</div>
            </div>
            <button class="notification-close"><i class="fas fa-times"></i></button>
        `;
        document.body.appendChild(notification);

        setTimeout(() => notification.classList.add('show'), 100);

        notification.querySelector('.notification-close').addEventListener('click', () => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        });

        setTimeout(() => {
            if (notification.parentNode) {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }
        }, 4000);
    };
});



telainicial.html <!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TechNoBug - Página Inicial</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/telainicial.css') }}">
</head>
<body>
    <!-- Header -->
    <header class="app-header">
        <div class="header-content">
            <div class="search-bar">
                <i class="fas fa-search"></i>
                <input type="text" placeholder="Pesquisar postagens, tópicos...">
            </div>
            <div class="logo">
                <i class="fas fa-graduation-cap"></i>
                <span>TechNoBug</span>
            </div>
            <button class="btn menu-btn" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasMenu" aria-controls="offcanvasMenu">
                <i class="fas fa-bars"></i>
                <span>Menu</span>
            </button>
        </div>
    </header>

    <!-- Offcanvas Menu -->
    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasMenu" aria-labelledby="offcanvasMenuLabel">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="offcanvasMenuLabel">Menu</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <div class="user-profile mb-4">
                <div class="d-flex align-items-center">
                    <div class="avatar me-3">
                        <div class="avatar-initials bg-primary text-white rounded-circle d-flex justify-content-center align-items-center">
                            {{ user.username[0]|upper }}
                        </div>
                    </div>
                    <div>
                        <h6 class="mb-0">{{ user.username }}</h6>
                        <small class="text-muted">{{ user.email }}</small>
                    </div>
                </div>
            </div>
            <ul class="navbar-nav">
                <li class="nav-item mb-2"><a class="nav-link active" href="{{ url_for('telainicial') }}"><i class="fas fa-home me-2"></i>Página Inicial</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="{{ url_for('materiais') }}"><i class="fas fa-book me-2"></i>Materiais de Estudo</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="{{ url_for('pdfs') }}"><i class="fas fa-file-pdf me-2"></i>PDFs e Apostilas</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="{{ url_for('videos') }}"><i class="fas fa-video me-2"></i>Vídeos e Tutoriais</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="{{ url_for('codigo') }}"><i class="fas fa-code me-2"></i>Exemplos de Código</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="#"><i class="fas fa-users me-2"></i>Comunidade</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="#"><i class="fas fa-cog me-2"></i>Configurações</a></li>
                <li class="nav-item"><a class="nav-link text-danger" href="{{ url_for('logout') }}"><i class="fas fa-sign-out-alt me-2"></i>Sair</a></li>
            </ul>
        </div>
    </div>

    <!-- Main Content -->
    <div class="container">
        <main class="main-content">
            <!-- Post Creation Form -->
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-pen"></i>
                    <span>Crie uma Postagem</span>
                </h2>
            </div>
            <div class="post-creation-card">
                <form class="post-form">
                    <div class="mb-3 position-relative">
                        <textarea class="form-control" name="post_content" rows="4" placeholder="No que você está pensando?" required></textarea>
                        <div class="char-counter">0/500</div>
                    </div>
                    <div class="row align-items-center">
                        <div class="col-md-6 mb-3 mb-md-0">
                            <select class="form-select" name="category" required>
                                <option value="" disabled selected>Selecione uma categoria</option>
                                <option value="Dúvidas">Dúvidas</option>
                                <option value="Dicas">Dicas</option>
                                <option value="Projetos">Projetos</option>
                                <option value="Discussão">Discussão</option>
                                <option value="Notícias">Notícias</option>
                            </select>
                        </div>
                        <div class="col-md-6 text-md-end">
                            <button type="submit" class="btn btn-primary">Publicar</button>
                        </div>
                    </div>
                </form>
            </div>

            <!-- Category Filter -->
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-filter"></i>
                    <span>Filtrar por Categoria</span>
                </h2>
            </div>
            <div class="category-filter mb-4">
                <button class="btn btn-outline-primary category-btn active" data-category="Todas">Todas</button>
                <button class="btn btn-outline-primary category-btn" data-category="Dúvidas">Dúvidas</button>
                <button class="btn btn-outline-primary category-btn" data-category="Dicas">Dicas</button>
                <button class="btn btn-outline-primary category-btn" data-category="Projetos">Projetos</button>
                <button class="btn btn-outline-primary category-btn" data-category="Discussão">Discussão</button>
                <button class="btn btn-outline-primary category-btn" data-category="Notícias">Notícias</button>
            </div>

            <!-- Post List -->
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-list"></i>
                    <span>Postagens</span>
                </h2>
            </div>
            <div class="post-list">
                {% if posts %}
                    {% for post in posts %}
                        <div class="post-card" data-post-id="{{ post.id }}" data-category="{{ post.category }}">
                            <div class="post-header">
                                <div class="user-info">
                                    <div class="avatar">
                                        <div class="avatar-initials bg-primary text-white rounded-circle d-flex justify-content-center align-items-center">
                                            {{ post.author.username[0]|upper }}
                                        </div>
                                    </div>
                                    <div>
                                        <h5 class="username">{{ post.author.username }}</h5>
                                        <small class="text-muted">{{ post.created_at.strftime('%d/%m/%Y %H:%M') }}</small>
                                    </div>
                                </div>
                                {% if post.user_id == user.id %}
                                    <div class="post-actions">
                                        <button class="btn btn-sm btn-danger delete-post" data-post-id="{{ post.id }}">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                {% endif %}
                            </div>
                            <div class="post-content">
                                <div class="post-category-tag">{{ post.category }}</div>
                                <p>{{ post.content }}</p>
                            </div>
                            <div class="post-footer">
                                <button class="btn btn-sm btn-outline-primary like-btn" data-post-id="{{ post.id }}">
                                    <i class="fas fa-thumbs-up"></i> <span class="like-count">0</span>
                                </button>
                                <a href="{{ url_for('post_comments', post_id=post.id) }}" class="btn btn-sm btn-outline-secondary comment-btn">
                                    <i class="fas fa-comment"></i> Comentar
                                </a>
                            </div>
                        </div>
                    {% endfor %}
                {% else %}
                    <div class="empty-state-card">
                        <div class="text-center py-3">
                            <i class="fas fa-file-alt fa-2x mb-2 text-muted"></i>
                            <p class="text-muted">Nenhuma postagem encontrada.</p>
                        </div>
                    </div>
                {% endif %}
            </div>
        </main>
    </div>

    <!-- Footer -->
    <footer class="app-footer">
        <div class="footer-content">
            <div class="footer-column">
                <h3>Sobre Nós</h3>
                <ul class="footer-links">
                    <li><a href="#"><i class="fas fa-info-circle"></i> Nossa Missão</a></li>
                    <li><a href="#"><i class="fas fa-users"></i> Equipe</a></li>
                    <li><a href="#"><i class="fas fa-building"></i> Parceiros</a></li>
                    <li><a href="#"><i class="fas fa-newspaper"></i> Blog</a></li>
                </ul>
            </div>
            <div class="footer-column">
                <h3>Recursos</h3>
                <ul class="footer-links">
                    <li><a href="#"><i class="fas fa-book"></i> Biblioteca</a></li>
                    <li><a href="#"><i class="fas fa-code"></i> Projetos</a></li>
                    <li><a href="#"><i class="fas fa-certificate"></i> Certificações</a></li>
                    <li><a href="#"><i class="fas fa-download"></i> Downloads</a></li>
                </ul>
            </div>
            <div class="footer-column">
                <h3>Comunidade</h3>
                <ul class="footer-links">
                    <li><a href="#"><i class="fas fa-comments"></i> Fórum</a></li>
                    <li><a href="#"><i class="fas fa-chalkboard-teacher"></i> Webinars</a></li>
                    <li><a href="#"><i class="fas fa-handshake"></i> Programas de Mentoria</a></li>
                    <li><a href="#"><i class="fas fa-laptop-code"></i> Hackathons</a></li>
                </ul>
            </div>
            <div class="footer-column">
                <h3>Contato</h3>
                <ul class="footer-links">
                    <li><a href="#"><i class="fas fa-envelope"></i> Suporte</a></li>
                    <li><a href="#"><i class="fas fa-headset"></i> Fale Conosco</a></li>
                    <li><a href="#"><i class="fas fa-map-marker-alt"></i> Localização</a></li>
                    <li><a href="#"><i class="fas fa-question-circle"></i> FAQ</a></li>
                </ul>
            </div>
        </div>
        <div class="footer-bottom">
            <p>© 2025 TechNoBug. Todos os direitos reservados.</p>
        </div>
    </footer>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/telainicial.js') }}"></script>
</body>
</html>



document.addEventListener('DOMContentLoaded', function() {
    // Elementos da interface
    const searchBar = document.querySelector('.search-bar');
    const searchInput = document.querySelector('.search-bar input');
    const searchIcon = document.querySelector('.search-bar i');
    const categories = document.querySelectorAll('.category');
    const postForm = document.getElementById('postForm');
    const postTextarea = document.querySelector('textarea[name="content"]');
    const charCounter = document.querySelector('.char-counter');
    const categorySelect = document.querySelector('select[name="category"]');
    const sideMenu = document.getElementById('offcanvasMenu');
    const deleteButtons = document.querySelectorAll('.delete-post');
    const likeButtons = document.querySelectorAll('.like-btn');
    const commentButtons = document.querySelectorAll('.comment-btn');
    const commentForms = document.querySelectorAll('.comment-form');
    const commentLikeButtons = document.querySelectorAll('.comment-like-btn');

    // Inicializa componentes
    initializeComponents();

    // Configura eventos
    setupSearchBar();
    setupCategoryFilter();
    setupPostForm();
    setupDeleteButtons();
    setupLikeButtons();
    setupCommentButtons();
    setupCommentForms();
    setupCommentLikeButtons();
    setupDrawer();

    function initializeComponents() {
        // Carrega likes para posts
        likeButtons.forEach(btn => {
            const postId = btn.closest('.post-card').dataset.postId;
            fetch(`/get_post_likes/${postId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    btn.querySelector('.like-count').textContent = data.like_count;
                    if (data.user_liked) {
                        btn.classList.add('active');
                    }
                }
            })
            .catch(error => console.error('Error fetching post likes:', error));
        });

        // Carrega likes para comentários
        commentLikeButtons.forEach(btn => {
            const commentId = btn.getAttribute('data-comment-id');
            fetch(`/get_comment_likes/${commentId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    btn.querySelector('.like-count').textContent = data.like_count;
                    if (data.user_liked) {
                        btn.classList.add('liked');
                    }
                }
            })
            .catch(error => console.error('Error fetching comment likes:', error));
        });

        // Inicializa o contador de caracteres para o formulário de postagem
        if (postTextarea && charCounter) {
            postTextarea.dispatchEvent(new Event('input'));
        }

        // Ajusta a categoria ativa ao iniciar a página
        if (categories && categories.length > 0) {
            const activeCategory = localStorage.getItem('activeCategory') || 'Todas';
            categories.forEach(cat => {
                const catValue = cat.dataset.category;
                if (catValue === activeCategory) {
                    cat.classList.add('active');
                } else {
                    cat.classList.remove('active');
                }
            });
            filterPosts('');
        }
    }

    function normalizeText(text) {
        return text
            .toLowerCase()
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '')
            .replace(/\s+/g, ' ')
            .trim();
    }

    function setupSearchBar() {
        if (!searchBar || !searchInput || !searchIcon) return;

        // Toggle da barra de pesquisa em dispositivos móveis
        searchIcon.addEventListener('click', function(event) {
            if (window.innerWidth <= 992) {
                searchBar.classList.toggle('search-active');
                if (searchBar.classList.contains('search-active')) {
                    searchInput.focus();
                    searchInput.value = '';
                    filterPosts('');
                } else {
                    searchInput.blur();
                    searchInput.value = '';
                    filterPosts('');
                }
                event.stopPropagation();
            }
        });

        // Fecha a barra de pesquisa ao clicar fora
        document.addEventListener('click', function(event) {
            if (window.innerWidth <= 992 && !searchBar.contains(event.target)) {
                searchBar.classList.remove('search-active');
                searchInput.value = '';
                filterPosts('');
            }
        });

        searchBar.addEventListener('click', function(event) {
            event.stopPropagation();
        });

        // Pesquisa em tempo real
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase().trim();
            filterPosts(searchTerm);
        });

        // Pesquisa ao pressionar Enter
        searchInput.addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                const searchTerm = this.value.toLowerCase().trim();
                filterPosts(searchTerm);
                showNotification('Pesquisa realizada!', 'success');
            }
        });
    }

    function filterPosts(searchTerm) {
        const activeCategory = document.querySelector('.category.active')?.dataset.category || 'Todas';
        const normalizedSearchTerm = normalizeText(searchTerm);

        document.querySelectorAll('.post-card').forEach(card => {
            const content = card.querySelector('.post-content p')?.textContent || '';
            const username = card.querySelector('.username')?.textContent || '';
            const category = card.dataset.category || '';

            const normalizedContent = normalizeText(content);
            const normalizedUsername = normalizeText(username);
            const normalizedCategory = normalizeText(category);

            const searchCategoryMap = {
                'ia': 'ia',
                'banco de dados': 'banco de dados',
                'frontend': 'front-end',
                'front-end': 'front-end',
                'backend': 'back-end',
                'back-end': 'back-end',
                'programacao': 'programacao',
                'carreiras': 'carreiras',
                'duvidas gerais': 'duvidas gerais',
                'modelagem': 'modelagem a banco de dados',
                'modelagem de dados': 'modelagem a banco de dados',
                'modelagem a banco de dados': 'modelagem a banco de dados',
                'logica': 'logica',
                'processos': 'processos',
                'android': 'programacao android',
                'programacao android': 'programacao android',
                'multidisciplinar': 'projeto multidisciplinar',
                'projeto multidisciplinar': 'projeto multidisciplinar',
                'redes': 'redes',
                'versionamento': 'versionamento'
            };

            const mappedSearchTerm = searchCategoryMap[normalizedSearchTerm] || normalizedSearchTerm;

            const matchesSearch = searchTerm === '' ||
                normalizedContent.includes(normalizedSearchTerm) ||
                normalizedUsername.includes(normalizedSearchTerm) ||
                normalizedCategory.includes(mappedSearchTerm);

            const matchesCategory = activeCategory === 'Todas' || normalizedCategory === normalizeText(activeCategory);

            if (matchesSearch && matchesCategory) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
    }

    function setupCategoryFilter() {
        if (!categories || categories.length === 0) return;

        categories.forEach(category => {
            category.addEventListener('click', function() {
                categories.forEach(c => c.classList.remove('active'));
                this.classList.add('active');

                const categoryName = this.dataset.category;
                localStorage.setItem('activeCategory', categoryName);

                filterPosts('');

                // Limpa a pesquisa ao mudar de categoria
                if (searchInput) {
                    searchInput.value = '';
                    searchBar.classList.remove('search-active');
                }
                showNotification(`Filtrando por ${this.textContent.trim()}`, 'success');
            });
        });
    }

    function setupPostForm() {
        if (!postForm || !postTextarea || !charCounter) return;

        postTextarea.addEventListener('input', function() {
            const maxLength = 500;
            const currentLength = this.value.length;
            charCounter.textContent = `${currentLength}/${maxLength}`;
            charCounter.classList.toggle('limit', currentLength > maxLength * 0.8);

            if (currentLength > maxLength) {
                this.value = this.value.substring(0, maxLength);
                charCounter.textContent = `${maxLength}/${maxLength}`;
                showNotification('Limite de caracteres atingido', 'error');
            }
        });

        if (categorySelect) {
            categorySelect.addEventListener('focus', function() {
                this.parentElement.classList.add('active');
            });

            categorySelect.addEventListener('blur', function() {
                this.parentElement.classList.remove('active');
            });

            categorySelect.addEventListener('change', function() {
                const selectedCategory = this.options[this.selectedIndex].text;
                showNotification(`Categoria selecionada: ${selectedCategory}`, 'info');
            });
        }

        postForm.addEventListener('submit', function(e) {
            e.preventDefault();

            const submitButton = postForm.querySelector('button[type="submit"]');
            if (submitButton) {
                submitButton.disabled = true;
                submitButton.textContent = 'Enviando...';
            }

            if (postTextarea.value.trim() === '') {
                showNotification('Digite algo para publicar', 'error');
                postTextarea.focus();
                if (submitButton) {
                    submitButton.disabled = false;
                    submitButton.textContent = 'Publicar';
                }
                return;
            }

            if (categorySelect && categorySelect.value === '') {
                showNotification('Selecione uma categoria', 'error');
                categorySelect.focus();
                if (submitButton) {
                    submitButton.disabled = false;
                    submitButton.textContent = 'Publicar';
                }
                return;
            }

            fetch('/telainicial', {
                method: 'POST',
                body: new FormData(postForm)
            })
            .then(response => response.text())
            .then(() => {
                showNotification('Postagem publicada com sucesso!', 'success');
                postForm.reset();
                charCounter.textContent = '0/500';
                window.location.reload();
            })
            .catch(error => {
                showNotification('Erro ao publicar postagem. Tente novamente.', 'error');
                console.error(`Erro ao enviar postagem: ${error}`);
            })
            .finally(() => {
                if (submitButton) {
                    submitButton.disabled = false;
                    submitButton.textContent = 'Publicar';
                }
            });
        });
    }

    function setupDeleteButtons() {
        if (!deleteButtons || deleteButtons.length === 0) return;

        deleteButtons.forEach(button => {
            button.addEventListener('click', function() {
                const postId = this.dataset.postId;
                if (confirm('Tem certeza que deseja deletar esta postagem?')) {
                    fetch(`/delete_post/${postId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.status === 'success') {
                            document.querySelector(`.post-card[data-post-id="${postId}"]`).remove();
                            showNotification('Postagem deletada com sucesso!', 'success');
                        } else {
                            showNotification('Erro ao deletar postagem.', 'error');
                        }
                    })
                    .catch(() => {
                        showNotification('Erro ao conectar com o servidor.', 'error');
                    });
                }
            });
        });
    }

    function setupLikeButtons() {
        if (!likeButtons || likeButtons.length === 0) return;

        likeButtons.forEach(button => {
            button.addEventListener('click', function() {
                const postId = this.closest('.post-card').dataset.postId;
                fetch(`/like_post/${postId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        this.querySelector('.like-count').textContent = data.like_count;
                        if (data.liked) {
                            this.classList.add('active');
                            showNotification('Postagem curtida!', 'success');
                        } else {
                            this.classList.remove('active');
                            showNotification('Like removido', 'info');
                        }
                    } else {
                        showNotification(data.message || 'Erro ao curtir postagem.', 'error');
                    }
                })
                .catch(() => {
                    showNotification('Erro ao conectar com o servidor.', 'error');
                });
            });
        });
    }

    function setupCommentButtons() {
        if (!commentButtons || commentButtons.length === 0) return;

        commentButtons.forEach(button => {
            button.addEventListener('click', function() {
                const postCard = this.closest('.post-card');
                const commentSection = postCard.querySelector('.comments-section');
                if (commentSection) {
                    const textarea = commentSection.querySelector('textarea[name="comment_content"]');
                    if (textarea) {
                        textarea.focus();
                    }
                }
            });
        });
    }

    function setupCommentForms() {
        if (!commentForms || commentForms.length === 0) return;

        commentForms.forEach(form => {
            const textarea = form.querySelector('textarea[name="comment_content"]');
            const postId = form.dataset.postId;

            form.addEventListener('submit', function(e) {
                e.preventDefault();
                const content = textarea?.value.trim() || '';

                if (!content) {
                    showNotification('O comentário não pode estar vazio', 'error');
                    if (textarea) textarea.focus();
                    return;
                }

                fetch(`/comment/${postId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({
                        'comment_content': content
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        const commentsList = form.nextElementSibling;
                        if (commentsList) {
                            const newComment = document.createElement('div');
                            newComment.className = 'comment';
                            newComment.dataset.commentId = data.comment.id;
                            newComment.innerHTML = `
                                <div class="d-flex">
                                    <div class="avatar me-2">
                                        <div class="avatar-initials bg-primary text-white rounded-circle d-flex justify-content-center align-items-center">
                                            ${data.comment.username[0].toUpperCase()}
                                        </div>
                                    </div>
                                    <div>
                                        <h6 class="mb-0">${data.comment.username}</h6>
                                        <small class="text-muted">${data.comment.created_at}</small>
                                        <p class="mb-1">${data.comment.content}</p>
                                        <button class="btn btn-sm btn-outline-primary comment-like-btn" data-comment-id="${data.comment.id}">
                                            <i class="fas fa-thumbs-up"></i> <span class="like-count">0</span>
                                        </button>
                                    </div>
                                </div>
                            `;
                            commentsList.prepend(newComment);
                            if (textarea) {
                                textarea.value = '';
                            }
                            showNotification('Comentário adicionado com sucesso!', 'success');

                            // Initialize like button for the new comment
                            const newButton = newComment.querySelector('.comment-like-btn');
                            newButton.addEventListener('click', function() {
                                fetch(`/like_comment/${data.comment.id}`, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    }
                                })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.status === 'success') {
                                        newButton.querySelector('.like-count').textContent = data.like_count;
                                        if (data.liked) {
                                            newButton.classList.add('liked');
                                            showNotification('Comentário curtido!', 'success');
                                        } else {
                                            newButton.classList.remove('liked');
                                            showNotification('Like removido', 'info');
                                        }
                                    } else {
                                        showNotification(data.message || 'Erro ao curtir comentário.', 'error');
                                    }
                                })
                                .catch(() => {
                                    showNotification('Erro ao conectar com o servidor.', 'error');
                                });
                            });
                        }
                    } else {
                        showNotification(data.message || 'Erro ao adicionar comentário', 'error');
                    }
                })
                .catch(() => {
                    showNotification('Erro ao conectar com o servidor.', 'error');
                });
            });
        });
    }

    function setupCommentLikeButtons() {
        if (!commentLikeButtons || commentLikeButtons.length === 0) return;

        commentLikeButtons.forEach(button => {
            button.addEventListener('click', function() {
                const commentId = this.getAttribute('data-comment-id');
                fetch(`/like_comment/${commentId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        this.querySelector('.like-count').textContent = data.like_count;
                        if (data.liked) {
                            this.classList.add('liked');
                            showNotification('Comentário curtido!', 'success');
                        } else {
                            this.classList.remove('liked');
                            showNotification('Like removido', 'info');
                        }
                    } else {
                        showNotification(data.message || 'Erro ao curtir comentário.', 'error');
                    }
                })
                .catch(() => {
                    showNotification('Erro ao conectar com o servidor.', 'error');
                });
            });
        });
    }

    function setupDrawer() {
        if (!sideMenu) return;

        const drawerLinks = document.querySelectorAll('.offcanvas .nav-link');
        if (drawerLinks && drawerLinks.length > 0) {
            drawerLinks.forEach(link => {
                link.addEventListener('click', function() {
                    const bsOffcanvas = bootstrap.Offcanvas.getInstance(sideMenu);
                    if (bsOffcanvas) bsOffcanvas.hide();
                });
            });
        }

        document.addEventListener('click', function(event) {
            const isClickInsideDrawer = sideMenu.contains(event.target);
            const isClickOnToggler = event.target.closest('.menu-btn');
            const isOffcanvasOpen = sideMenu.classList.contains('show');

            if (!isClickInsideDrawer && !isClickOnToggler && isOffcanvasOpen) {
                const bsOffcanvas = bootstrap.Offcanvas.getInstance(sideMenu);
                if (bsOffcanvas) bsOffcanvas.hide();
            }
        });

        sideMenu.addEventListener('shown.bs.offcanvas', function() {
            document.body.style.overflow = 'hidden';
            document.body.style.paddingRight = '0';
            sideMenu.style.top = '0';
            sideMenu.style.height = '100vh';
        });

        sideMenu.addEventListener('hidden.bs.offcanvas', function() {
            document.body.style.overflow = '';
            document.body.style.paddingRight = '';
        });
    }

    // Função global para mostrar notificações
    window.showNotification = function(message, type) {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <div class="notification-message">${message}</div>
            </div>
            <button class="notification-close"><i class="fas fa-times"></i></button>
        `;
        document.body.appendChild(notification);

        setTimeout(() => notification.classList.add('show'), 100);

        notification.querySelector('.notification-close').addEventListener('click', () => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        });

        setTimeout(() => {
            if (notification.parentNode) {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }
        }, 4000);
    };

    // Função auxiliar para formatar datas (caso precise no futuro)
    function formatDate(dateStr) {
        const date = new Date(dateStr);
        const options = {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            hour12: false,
            timeZone: 'America/Sao_Paulo'
        };
        return date.toLocaleString('pt-BR', options).replace(',', '');
    }
});


telainicial.js



telainicial.css :root {
    --primary: #1a73e8;
    --primary-light: #4a91ff;
    --primary-dark: #1357b9;
    --primary-transparent: rgba(26, 115, 232, 0.1);
    --secondary: #202124;
    --secondary-light: #3c4043;
    --secondary-dark: #141517;
    --accent: #ff4444;
    --light: #ffffff;
    --light-gray: #f1f3f4;
    --medium-gray: #dadce0;
    --dark-gray: #80868b;
    --dark: #202124;
    --success: #34c759;
    --warning: #fbbc05;
    --danger: #ff4444;
    --font-primary: 'Inter', sans-serif;
    --font-secondary: 'Inter', sans-serif;
    --font-size-base: 1rem;
    --font-size-sm: 0.875rem;
    --font-size-lg: 1.25rem;
    --font-size-xl: 1.5rem;
    --font-size-xxl: 2rem;
    --font-size-hero: 3rem;
    --space-xs: 0.25rem;
    --space-sm: 0.5rem;
    --space-md: 1rem;
    --space-lg: 1.5rem;
    --space-xl: 2rem;
    --space-xxl: 3rem;
    --border-radius-sm: 0.375rem;
    --border-radius-md: 0.75rem;
    --border-radius-lg: 1rem;
    --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);
    --shadow-md: 0 3px 8px rgba(0, 0, 0, 0.12);
    --shadow-lg: 0 5px 15px rgba(0, 0, 0, 0.15);
    --transition-fast: 0.2s ease;
    --transition-normal: 0.3s ease;
    --primary-color: #1e293b;
    --secondary-color: #0ea5e9;
    --accent-color: #f97316;
    --text-color: #1e293b;
    --background-color: #f1f5f9;
    --card-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    --card-bg: #ffffff;
    --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    --gradient-bg: linear-gradient(135deg, #0ea5e9, #3b82f6);
}

*, *::before, *::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

html {
    font-size: 16px;
    scroll-behavior: smooth;
    overflow-x: hidden;
}

body {
    font-family: var(--font-primary);
    color: var(--text-color);
    background-color: var(--background-color);
    line-height: 1.7;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    margin: 0;
    padding: 0;
    overflow-x: hidden;
}

h1, h2, h3, h4, h5, h6 {
    font-family: var(--font-secondary);
    font-weight: 700;
    color: var(--secondary);
}

h1 { font-size: var(--font-size-hero); }
h2 { font-size: var(--font-size-xxl); }
h3 { font-size: var(--font-size-xl); }
h4 { font-size: var(--font-size-lg); }
h5 { font-size: var(--font-size-base); }
h6 { font-size: var(--font-size-sm); }

a {
    color: var(--primary);
    text-decoration: none;
    transition: color var(--transition-fast);
}

a:hover { color: var(--primary-dark); }

/* Header Styles */
.app-header {
    background: var(--gradient-bg);
    color: white;
    padding: 1.5rem 0;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    position: sticky;
    top: 0;
    z-index: 100;
    max-width: 100%;
    overflow-x: hidden;
}

.header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1280px;
    margin: 0 auto;
    padding: 0 2rem;
    position: relative;
    max-width: 100%;
}

.logo {
    display: flex;
    align-items: center;
    gap: 12px;
    font-weight: 700;
    font-size: 1.8rem;
    transition: opacity var(--transition-fast);
}

.logo i {
    font-size: 1.6rem;
}

.search-bar {
    position: relative;
    flex-grow: 1;
    max-width: 500px;
    margin: 0 2rem;
}

.search-bar input {
    width: 100%;
    padding: 12px 20px 12px 45px;
    border-radius: 50px;
    border: none;
    background-color: rgba(255, 255, 255, 0.2);
    color: white;
    font-size: 1rem;
    transition: var(--transition);
}

.search-bar input:focus {
    background-color: rgba(255, 255, 255, 0.3);
    outline: none;
}

.search-bar input::placeholder {
    color: rgba(255, 255, 255, 0.7);
}

.search-bar i {
    position: absolute;
    left: 16px;
    top: 50%;
    transform: translateY(-50%);
    color: white;
    font-size: 1.2rem;
    cursor: pointer;
}

/* Offcanvas Menu */
.offcanvas {
    width: 320px;
    box-shadow: var(--shadow-lg);
    background-color: var(--light);
    transition: transform var(--transition-normal);
    z-index: 1200;
    position: fixed;
    top: 0;
    height: 100vh;
}

.offcanvas-header {
    background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
    color: white;
    padding: var(--space-lg);
}

.offcanvas-title {
    font-weight: 700;
    font-size: var(--font-size-lg);
}



.btn-close {
    filter: brightness(0) invert(1);
}

.offcanvas-body {
    padding: var(--space-lg);
    overflow-y: auto;
}

.nav-link {
    padding: var(--space-md) var(--space-lg);
    color: var(--secondary);
    border-radius: var(--border-radius-sm);
    font-size: var(--font-size-base);
    font-weight: 500;
    transition: background-color var(--transition-fast), color var(--transition-fast), transform var(--transition-fast);
    display: flex;
    align-items: center;
}



.nav-link:hover {
    background-color: var(--primary-transparent);
    color: var(--primary);
    transform: translateX(5px);
}

.nav-link.active {
    background-color: var(--primary);
    color: white;
    transform: translateX(5px);
}

.nav-link i {
    margin-right: var(--space-md);
}

.navbar-nav .nav-item {
    margin-bottom: var(--space-sm);
}

.user-profile .avatar-initials {
    width: 50px;
    height: 50px;
    font-size: var(--font-size-lg);
    font-weight: 600;
}

/* Category Navigation */
.category-nav {
    padding: 1.5rem 0;
    position: sticky;
    top: 90px;
    background-color: var(--background-color);
    z-index: 90;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    max-width: 100%;
    overflow-x: hidden;
}

.categories-wrapper {
    max-width: 1280px;
    margin: 0 auto;
    padding: 0 2rem;
    max-width: 100%;
}

.categories {
    display: flex;
    gap: 10px;
    overflow-x: auto;
    padding-bottom: 10px;
    scroll-behavior: smooth;
    scrollbar-width: none;
    max-width: 100%;
}

.categories::-webkit-scrollbar {
    display: none;
}

.category {
    padding: 10px 20px;
    background-color: white;
    color: var(--text-color);
    border-radius: 50px;
    white-space: nowrap;
    font-weight: 500;
    cursor: pointer;
    border: 1px solid #e2e8f0;
    transition: var(--transition);
    font-size: 0.95rem;
}

.category.active {
    background-color: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
}

.category:hover:not(.active) {
    background-color: #f8fafc;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

/* Main Content */
.container {
    max-width: 1280px;
    margin: 0 auto;
    padding: 2rem;
    max-width: 100%;
}

.main-content {
    margin-top: 2rem;
    max-width: 100%;
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
}

.section-title {
    font-size: 1.8rem;
    font-weight: 700;
    color: var(--primary-color);
    margin: 0;
    display: flex;
    align-items: center;
    gap: 12px;
}

.section-title i {
    color: var(--accent-color);
}

/* Post Creation Card */
.post-creation-card {
    background-color: var(--card-bg);
    border-radius: 12px;
    box-shadow: var(--card-shadow);
    padding: 1.5rem;
    margin-bottom: 2rem;
}

.post-creation-card .form-control {
    border: 1px solid var(--medium-gray);
    border-radius: var(--border-radius-sm);
    padding: var(--space-md);
    font-size: var(--font-size-base);
    transition: border-color var(--transition-fast), box-shadow var(--transition-fast);
    resize: none;
}

.post-creation-card .form-control:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 3px var(--primary-transparent);
}

.post-creation-card .char-counter {
    position: absolute;
    bottom: 15px;
    right: 15px;
    font-size: var(--font-size-sm);
    color: var(--dark-gray);
}

.post-creation-card .char-counter.limit {
    color: var(--danger);
}

.post-creation-card .btn-publish {
    background-color: var(--primary);
    border-color: var(--primary);
    padding: var(--space-md) var(--space-xl);
    border-radius: var(--border-radius-sm);
    font-weight: 600;
    transition: background-color var(--transition-fast), transform var(--transition-fast);
}

.post-creation-card .btn-publish:hover {
    background-color: var(--primary-dark);
    border-color: var(--primary-dark);
    transform: translateY(-2px);
}

.category-selector .form-select {
    border-radius: var(--border-radius-sm);
    padding: var(--space-sm) var(--space-md);
    font-size: var(--font-size-sm);
    max-width: 200px;
}

/* Post Grid */
.post-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 25px;
    max-width: 100%;
}

.post-card {
    background-color: var(--card-bg);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: var(--card-shadow);
    transition: var(--transition);
    position: relative;
    max-width: 100%;
}

.post-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 12px 30px rgba(0, 0, 0, 0.15);
}

.post-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.25rem;
    border-bottom: 1px solid var(--medium-gray);
}

.user-info {
    display: flex;
    align-items: center;
    gap: 12px;
}

.avatar-initials {
    width: 40px;
    height: 40px;
    font-size: var(--font-size-base);
    font-weight: 600;
}

.username {
    font-size: var(--font-size-base);
    font-weight: 600;
    color: var(--primary-color);
    margin: 0;
}

.post-actions .btn {
    padding: 6px 12px;
}

.post-content {
    padding: 1.25rem;
}

.post-category-tag {
    display: inline-block;
    background-color: var(--accent-color);
    color: white;
    padding: 4px 12px;
    border-radius: 50px;
    font-size: 0.75rem;
    font-weight: 600;
    margin-bottom: 12px;
}

.post-content p {
    font-size: 0.9rem;
    color: #64748b;
    display: -webkit-box;
    -webkit-line-clamp: 4;
    -webkit-box-orient: vertical;
    overflow: hidden;
    margin-bottom: 0;
}

.post-footer {
    padding: 1rem 1.25rem;
    border-top: 1px solid var(--medium-gray);
    display: flex;
    gap: 12px;
}

.post-footer .btn {
    font-size: 0.85rem;
    padding: 6px 12px;
}

.like-btn.active {
    background-color: var(--primary);
    color: white;
    border-color: var(--primary);
}

/* Empty State Card */
.empty-state-card {
    background-color: var(--card-bg);
    border-radius: 12px;
    box-shadow: var(--card-shadow);
    text-align: center;
}

/* Footer Styles */
.app-footer {
    background-color: var(--primary-color);
    color: white;
    padding: 3rem 0;
    margin-top: auto;
    max-width: 100%;
}

.footer-content {
    max-width: 1280px;
    margin: 0 auto;
    padding: 0 2rem;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 3rem;
    max-width: 100%;
}

.footer-column h3 {
    font-size: 1.2rem;
    margin-bottom: 1.5rem;
    position: relative;
    padding-bottom: 10px;
}

.footer-column h3::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: 0;
    width: 40px;
    height: 3px;
    background-color: var(--accent-color);
}

.footer-links {
    list-style: none;
    padding: 0;
    margin: 0;
}

.footer-links li {
    margin-bottom: 12px;
}

.footer-links a {
    color: #cbd5e1;
    text-decoration: none;
    transition: var(--transition);
    display: flex;
    align-items: center;
    gap: 8px;
}

.footer-links a:hover {
    color: white;
}

.footer-bottom {
    max-width: 1280px;
    margin: 0 auto;
    padding: 1.5rem 2rem 0;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    margin-top: 2rem;
    text-align: center;
    font-size: 0.9rem;
    color: #94a3b8;
    max-width: 100%;
}

/* Responsive Design */
@media (max-width: 1400px) {
    .container { max-width: 1140px; }
}

@media (max-width: 1200px) {
    .container { max-width: 960px; }
    .logo { font-size: 1.6rem; }
}

@media (max-width: 992px) {
    .container { max-width: 720px; }
    .header-content {
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        position: relative;
        max-width: 100%;
    }
    .logo {
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        font-size: 1.4rem;
    }
    .search-bar.search-active + .logo {
        display: none;
    }
    .search-bar {
        max-width: unset;
        margin: 0;
        order: -1;
        position: relative;
    }
    .search-bar input {
        display: none;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        max-width: 200px;
        width: 100%;
        padding: 8px 15px 8px 36px;
        z-index: 101;
        border-radius: var(--border-radius-md);
        background-color: rgba(255, 255, 255, 0.95);
        color: var(--text-color);
        box-shadow: var(--shadow-md);
        transition: opacity var(--transition-fast), transform var(--transition-fast);
        opacity: 0;
        transform: translate(-50%, -40%);
    }
    .search-bar.search-active input {
        display: block;
        opacity: 1;
        transform: translate(-50%, -50%);
    }
    .search-bar input::placeholder {
        color: var(--dark-gray);
    }
    .search-bar i {
        position: static;
        transform: none;
        font-size: 1.2rem;
        cursor: pointer;
        padding: var(--space-sm);
    }
    .search-bar.search-active i {
        position: absolute;
        left: calc(50% - 94px);
        top: 50%;
        transform: translateY(-50%);
        color: var(--text-color);
        z-index: 102;
    }
    .menu-btn {
        order: 1;
    }
    .offcanvas { width: 280px; }
}           

@media (max-width: 768px) {
    .container { max-width: 540px; padding: var(--space-md); }
    .logo { font-size: 1.4rem; }
    .post-grid {
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
    .section-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
    }
}

@media (max-width: 576px) {
    .container { max-width: 100%; padding: var(--space-sm); }
    .logo { font-size: 1.2rem; }
    .post-grid { grid-template-columns: 1fr; }
    .categories { gap: 8px; }
    .category { padding: 8px 16px; font-size: 0.85rem; }
}