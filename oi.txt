<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TechNoBug - Tela Inicial</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/telainicial.css') }}">
</head>
<body>
    <!-- Header -->
    <header class="app-header">
        <div class="header-content">
            <div class="search-bar">
                <i class="fas fa-search"></i>
                <input type="text" placeholder="Pesquisar postagens, tópicos...">
            </div>
            <div class="logo">
                <i class="fas fa-graduation-cap"></i>
                <span>TechNoBug</span>
            </div>
            <button class="btn menu-btn" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasMenu" aria-controls="offcanvasMenu">
                <i class="fas fa-bars"></i>
                <span>Menu</span>
            </button>
        </div>
    </header>

    <!-- Offcanvas Menu -->
    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasMenu" aria-labelledby="offcanvasMenuLabel">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="offcanvasMenuLabel">Menu</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <div class="user-profile mb-4">
                <div class="d-flex align-items-center">
                    <div class="avatar me-3">
                        <div class="avatar-initials bg-primary text-white rounded-circle d-flex justify-content-center align-items-center">
                            {{ user.username[0]|upper }}
                        </div>
                    </div>
                    <div>
                        <h6 class="mb-0">{{ user.username }}</h6>
                        <small class="text-muted">{{ user.email }}</small>
                    </div>
                </div>
            </div>
            <ul class="navbar-nav">
                <li class="nav-item mb-2"><a class="nav-link active" href="{{ url_for('telainicial') }}"><i class="fas fa-home me-2"></i>Página Inicial</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="{{ url_for('materiais') }}"><i class="fas fa-book me-2"></i>Materiais de Estudo</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="{{ url_for('pdfs') }}"><i class="fas fa-file-pdf me-2"></i>PDFs e Apostilas</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="{{ url_for('videos') }}"><i class="fas fa-video me-2"></i>Vídeos e Tutoriais</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="{{ url_for('codigo') }}"><i class="fas fa-code me-2"></i>Exemplos de Código</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="#"><i class="fas fa-users me-2"></i>Comunidade</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="#"><i class="fas fa-cog me-2"></i>Configurações</a></li>
                <li class="nav-item"><a class="nav-link text-danger" href="{{ url_for('logout') }}"><i class="fas fa-sign-out-alt me-2"></i>Sair</a></li>
            </ul>
        </div>
    </div>

    <!-- Category Navigation -->
    <nav class="category-nav">
        <div class="categories-wrapper">
            <div class="categories">
                <div class="category active">Todas</div>
                <div class="category">Dúvidas Gerais</div>
                <div class="category">Programação</div>
                <div class="category">I.A</div>
                <div class="category">Banco de Dados</div>
                <div class="category">Front-end</div>
                <div class="category">Back-end</div>
                <div class="category">Carreiras</div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container">
        <main class="main-content">
            <!-- Post Creation Section -->
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-edit"></i>
                    <span>Compartilhe sua Dúvida</span>
                </h2>
            </div>
            <div class="post-creation-card">
                <form method="POST" action="{{ url_for('telainicial') }}" id="postForm">
                    <div class="mb-3 position-relative">
                        <textarea class="form-control" name="content" rows="4" placeholder="O que você está pensando, {{ user.username }}?" required></textarea>
                        <div class="char-counter">0/500</div>
                    </div>
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="category-selector">
                            <select name="category" class="form-select">
                                <option value="Dúvidas Gerais">Dúvidas Gerais</option>
                                <option value="Programação">Programação</option>
                                <option value="I.A">I.A</option>
                                <option value="Banco de Dados">Banco de Dados</option>
                                <option value="Front-end">Front-end</option>
                                <option value="Back-end">Back-end</option>
                                <option value="Carreiras">Carreiras</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary btn-publish">
                            <i class="fas fa-paper-plane me-2"></i>Publicar
                        </button>
                    </div>
                </form>
            </div>

            <!-- Recent Posts Section -->
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-stream"></i>
                    <span>Postagens Recentes</span>
                </h2>
            </div>
            <div class="post-grid">
                {% if posts %}
                    {% for post in posts %}
                        <div class="post-card" data-post-id="{{ post.id }}" data-category="{{ post.category }}">
                            <div class="post-header">
                                <div class="user-info">
                                    <div class="avatar">
                                        <div class="avatar-initials bg-primary text-white rounded-circle d-flex justify-content-center align-items-center">
                                            {{ post.author.username[0]|upper }}
                                        </div>
                                    </div>
                                    <div>
                                        <h5 class="username">{{ post.author.username }}</h5>
                                        <small class="text-muted">{{ post.created_at.strftime('%d/%m/%Y %H:%M') }}</small>
                                    </div>
                                </div>
                                {% if post.user_id == user.id %}
                                    <div class="post-actions">
                                        <button class="btn btn-sm btn-danger delete-post" data-post-id="{{ post.id }}">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                {% endif %}
                            </div>
                            <div class="post-content">
                                <div class="post-category-tag">{{ post.category }}</div>
                                <p>{{ post.content }}</p>
                            </div>
                            <div class="post-footer">
                                <button class="btn btn-sm btn-outline-primary like-btn">
                                    <i class="fas fa-thumbs-up"></i> <span class="like-count">0</span>
                                </button>
                                <button class="btn btn-sm btn-outline-secondary comment-btn">
                                    <i class="fas fa-comment"></i> Comentar
                                </button>
                            </div>
                        </div>
                    {% endfor %}
                {% else %}
                    <div class="empty-state-card">
                        <div class="text-center py-5">
                            <i class="fas fa-comment-slash fa-3x mb-3 text-muted"></i>
                            <h5>Nenhuma postagem ainda</h5>
                            <p class="text-muted">Seja o primeiro a compartilhar!</p>
                        </div>
                    </div>
                {% endif %}
            </div>
        </main>
    </div>

    <!-- Footer -->
    <footer class="app-footer">
        <div class="footer-content">
            <div class="footer-column">
                <h3>Sobre Nós</h3>
                <ul class="footer-links">
                    <li><a href="#"><i class="fas fa-info-circle"></i> Nossa Missão</a></li>
                    <li><a href="#"><i class="fas fa-users"></i> Equipe</a></li>
                    <li><a href="#"><i class="fas fa-building"></i> Parceiros</a></li>
                    <li><a href="#"><i class="fas fa-newspaper"></i> Blog</a></li>
                </ul>
            </div>
            <div class="footer-column">
                <h3>Recursos</h3>
                <ul class="footer-links">
                    <li><a href="#"><i class="fas fa-book"></i> Biblioteca</a></li>
                    <li><a href="#"><i class="fas fa-code"></i> Projetos</a></li>
                    <li><a href="#"><i class="fas fa-certificate"></i> Certificações</a></li>
                    <li><a href="#"><i class="fas fa-download"></i> Downloads</a></li>
                </ul>
            </div>
            <div class="footer-column">
                <h3>Comunidade</h3>
                <ul class="footer-links">
                    <li><a href="#"><i class="fas fa-comments"></i> Fórum</a></li>
                    <li><a href="#"><i class="fas fa-chalkboard-teacher"></i> Webinars</a></li>
                    <li><a href="#"><i class="fas fa-handshake"></i> Programas de Mentoria</a></li>
                    <li><a href="#"><i class="fas fa-laptop-code"></i> Hackathons</a></li>
                </ul>
            </div>
            <div class="footer-column">
                <h3>Contato</h3>
                <ul class="footer-links">
                    <li><a href="#"><i class="fas fa-envelope"></i> Suporte</a></li>
                    <li><a href="#"><i class="fas fa-headset"></i> Fale Conosco</a></li>
                    <li><a href="#"><i class="fas fa-map-marker-alt"></i> Localização</a></li>
                    <li><a href="#"><i class="fas fa-question-circle"></i> FAQ</a></li>
                </ul>
            </div>
        </div>
        <div class="footer-bottom">
            <p>© 2025 TechNoBug. Todos os direitos reservados.</p>
        </div>
    </footer>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/telainicial.js') }}"></script>
</body>
</html>



quero colocar para que seja possivel comentar e <select name="category" class="form-select">
                                <option value="Dúvidas Gerais">Dúvidas Gerais</option>
                                <option value="Programação">Programação</option>
                                <option value="I.A">I.A</option>
                                <option value="Banco de Dados">Banco de Dados</option>
                                <option value="Front-end">Front-end</option>
                                <option value="Back-end">Back-end</option>
                                <option value="Carreiras">Carreiras</option>
                            </select>


quero que seja possivel selecionar entre as categorias, sao essas apenas const searchCategoryMap = {
                'ia': 'i.a',
                'i.a': 'i.a',
                'banco de dados': 'banco de dados',
                'frontend': 'front-end',
                'front-end': 'front-end',
                'backend': 'back-end',
                'back-end': 'back-end',
                'programacao': 'programação',
                'carreiras': 'carreiras',
                'duvidas gerais': 'dúvidas gerais'
            };


eu tenho esse telainicial.js document.addEventListener('DOMContentLoaded', function() {
    // Elementos da interface
    const searchBar = document.querySelector('.search-bar');
    const searchInput = document.querySelector('.search-bar input');
    const searchIcon = document.querySelector('.search-bar i');
    const categories = document.querySelectorAll('.category');
    const postForm = document.getElementById('postForm');
    const postTextarea = document.querySelector('textarea[name="content"]');
    const charCounter = document.querySelector('.char-counter');
    const sideMenu = document.getElementById('offcanvasMenu');
    const deleteButtons = document.querySelectorAll('.delete-post');
    const likeButtons = document.querySelectorAll('.like-btn');
    const commentButtons = document.querySelectorAll('.comment-btn');

    // Inicializa componentes
    initializeComponents();

    // Configura eventos
    setupSearchBar();
    setupCategoryFilter();
    setupPostForm();
    setupDeleteButtons();
    setupLikeButtons();
    setupCommentButtons();
    setupThemeSwitch();
    setupDrawer();

    function initializeComponents() {
        // Carrega likes salvos
        likeButtons.forEach(btn => {
            const postId = btn.closest('.post-card').dataset.postId;
            const savedLikes = localStorage.getItem(`likes_${postId}`) || 0;
            btn.querySelector('.like-count').textContent = savedLikes;
            if (localStorage.getItem(`liked_${postId}`)) {
                btn.classList.add('active');
            }
        });
    }

    function setupSearchBar() {
        if (!searchBar || !searchInput || !searchIcon) return;

        // Toggle da barra de pesquisa em dispositivos móveis
        searchIcon.addEventListener('click', function(event) {
            if (window.innerWidth <= 992) {
                searchBar.classList.toggle('search-active');
                if (searchBar.classList.contains('search-active')) {
                    searchInput.focus();
                    searchInput.value = '';
                    filterPosts('');
                } else {
                    searchInput.blur();
                    searchInput.value = '';
                    filterPosts('');
                }
                event.stopPropagation();
            }
        });

        // Fecha a barra de pesquisa ao clicar fora
        document.addEventListener('click', function(event) {
            if (window.innerWidth <= 992 && !searchBar.contains(event.target)) {
                searchBar.classList.remove('search-active');
                searchInput.value = '';
                filterPosts('');
            }
        });

        searchBar.addEventListener('click', function(event) {
            event.stopPropagation();
        });

        // Pesquisa em tempo real
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase().trim();
            filterPosts(searchTerm);
        });

        // Pesquisa ao pressionar Enter
        searchInput.addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                const searchTerm = this.value.toLowerCase().trim();
                filterPosts(searchTerm);
                showNotification('Pesquisa realizada!', 'success');
            }
        });
    }

    function filterPosts(searchTerm) {
        const activeCategory = document.querySelector('.category.active').textContent.trim();
        document.querySelectorAll('.post-card').forEach(card => {
            const content = card.querySelector('.post-content p').textContent.toLowerCase();
            const username = card.querySelector('.username').textContent.toLowerCase();
            const category = card.dataset.category.toLowerCase();

            const searchCategoryMap = {
                'ia': 'i.a',
                'i.a': 'i.a',
                'banco de dados': 'banco de dados',
                'frontend': 'front-end',
                'front-end': 'front-end',
                'backend': 'back-end',
                'back-end': 'back-end',
                'programacao': 'programação',
                'carreiras': 'carreiras',
                'duvidas gerais': 'dúvidas gerais'
            };

            const matchedCategory = searchCategoryMap[searchTerm] || searchTerm;

            const matchesSearch = searchTerm === '' ||
                content.includes(searchTerm) ||
                username.includes(searchTerm) ||
                category.includes(matchedCategory);

            const matchesCategory = activeCategory === 'Todas' || card.dataset.category === activeCategory;

            if (matchesSearch && matchesCategory) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
    }

    function setupCategoryFilter() {
        categories.forEach(category => {
            category.addEventListener('click', function() {
                categories.forEach(c => c.classList.remove('active'));
                this.classList.add('active');

                const categoryName = this.textContent.trim();
                document.querySelectorAll('.post-card').forEach(card => {
                    const cardCategory = card.dataset.category.trim();
                    if (categoryName === 'Todas' || cardCategory === categoryName) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });

                // Limpa a pesquisa ao mudar de categoria
                if (searchInput) {
                    searchInput.value = '';
                    searchBar.classList.remove('search-active');
                }
                showNotification(`Filtrando por ${categoryName}`, 'success');
            });
        });
    }

    function setupPostForm() {
        if (!postForm || !postTextarea || !charCounter) return;

        postTextarea.addEventListener('input', function() {
            const maxLength = 500;
            const currentLength = this.value.length;
            charCounter.textContent = `${currentLength}/${maxLength}`;
            charCounter.classList.toggle('limit', currentLength > maxLength * 0.8);

            if (currentLength > maxLength) {
                this.value = this.value.substring(0, maxLength);
                charCounter.textContent = `${maxLength}/${maxLength}`;
                showNotification('Limite de caracteres atingido', 'error');
            }
        });

        postTextarea.dispatchEvent(new Event('input'));

        postForm.addEventListener('submit', function(e) {
            if (postTextarea.value.trim() === '') {
                e.preventDefault();
                showNotification('Digite algo para publicar', 'error');
                postTextarea.focus();
            } else {
                showNotification('Postagem publicada com sucesso!', 'success');
            }
        });
    }

    function setupDeleteButtons() {
        deleteButtons.forEach(button => {
            button.addEventListener('click', function() {
                const postId = this.dataset.postId;
                if (confirm('Tem certeza que deseja deletar esta postagem?')) {
                    fetch(`/delete_post/${postId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.status === 'success') {
                            document.querySelector(`.post-card[data-post-id="${postId}"]`).remove();
                            showNotification('Postagem deletada com sucesso!', 'success');
                        } else {
                            showNotification('Erro ao deletar postagem.', 'error');
                        }
                    })
                    .catch(() => {
                        showNotification('Erro ao conectar com o servidor.', 'error');
                    });
                }
            });
        });
    }

    function setupLikeButtons() {
        likeButtons.forEach(button => {
            button.addEventListener('click', function() {
                const postId = this.closest('.post-card').dataset.postId;
                const likeCountSpan = this.querySelector('.like-count');
                let likeCount = parseInt(likeCountSpan.textContent);

                if (this.classList.contains('active')) {
                    likeCount--;
                    this.classList.remove('active');
                    localStorage.removeItem(`liked_${postId}`);
                    showNotification('Like removido', 'info');
                } else {
                    likeCount++;
                    this.classList.add('active');
                    localStorage.setItem(`liked_${postId}`, 'true');
                    showNotification('Postagem curtida!', 'success');
                }

                likeCountSpan.textContent = likeCount;
                localStorage.setItem(`likes_${postId}`, likeCount);
            });
        });
    }

    function setupCommentButtons() {
        commentButtons.forEach(button => {
            button.addEventListener('click', function() {
                const postId = this.closest('.post-card').dataset.postId;
                showNotification('Funcionalidade de comentários em desenvolvimento', 'info');
            });
        });
    }

    function setupThemeSwitch() {
        const themeSwitch = document.createElement('div');
        themeSwitch.classList.add('theme-switch');
        themeSwitch.innerHTML = '<i class="fas fa-moon"></i>';
        document.body.appendChild(themeSwitch);

        if (localStorage.getItem('theme') === 'dark') {
            document.body.classList.add('dark-theme');
            themeSwitch.innerHTML = '<i class="fas fa-sun"></i>';
        }

        themeSwitch.addEventListener('click', function() {
            document.body.classList.toggle('dark-theme');
            const isDark = document.body.classList.contains('dark-theme');
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
            themeSwitch.innerHTML = isDark ? '<i class="fas fa-sun"></i>' : '<i class="fas fa-moon"></i>';
            showNotification(isDark ? 'Tema escuro ativado' : 'Tema claro ativado', 'success');
        });
    }

    function setupDrawer() {
        const drawerLinks = document.querySelectorAll('.offcanvas .nav-link');
        drawerLinks.forEach(link => {
            link.addEventListener('click', function() {
                const bsOffcanvas = bootstrap.Offcanvas.getInstance(sideMenu) || new bootstrap.Offcanvas(sideMenu);
                if (bsOffcanvas) bsOffcanvas.hide();
            });
        });

        document.addEventListener('click', function(event) {
            const isClickInsideDrawer = sideMenu.contains(event.target);
            const isClickOnToggler = event.target.closest('.menu-btn');
            const isOffcanvasOpen = sideMenu.classList.contains('show');

            if (!isClickInsideDrawer && !isClickOnToggler && isOffcanvasOpen) {
                const bsOffcanvas = bootstrap.Offcanvas.getInstance(sideMenu) || new bootstrap.Offcanvas(sideMenu);
                if (bsOffcanvas) bsOffcanvas.hide();
            }
        });

        sideMenu.addEventListener('shown.bs.offcanvas', function() {
            document.body.style.overflow = 'hidden';
            document.body.style.paddingRight = '0';
            sideMenu.style.top = '0';
            sideMenu.style.height = '100vh';
        });

        sideMenu.addEventListener('hidden.bs.offcanvas', function() {
            document.body.style.overflow = '';
            document.body.style.paddingRight = '';
        });
    }

    function showNotification(message, type) {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <div class="notification-message">${message}</div>
            </div>
            <button class="notification-close"><i class="fas fa-times"></i></button>
        `;
        document.body.appendChild(notification);

        setTimeout(() => notification.classList.add('show'), 100);

        notification.querySelector('.notification-close').addEventListener('click', () => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        });

        setTimeout(() => {
            if (notification.parentNode) {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }
        }, 4000);
    }
});


estou fazendo em pyton flask

from flask import Flask, render_template, request, redirect, url_for, flash, session, jsonify
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime
import os
import firebase_admin
from firebase_admin import auth, credentials
from flask_migrate import Migrate
import logging

# Configurar logging para depuração
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.config.from_object('backend.config.Config')
db = SQLAlchemy(app)
migrate = Migrate(app, db)

# Criar pasta instance se não existir
instance_dir = app.config['INSTANCE_DIR']
if not os.path.exists(instance_dir):
    try:
        os.makedirs(instance_dir)
        logger.info(f"Pasta instance criada em: {instance_dir}")
    except Exception as e:
        logger.error(f"Erro ao criar pasta instance: {str(e)}")
        raise

# Log do caminho do banco de dados
logger.info(f"SQLALCHEMY_DATABASE_URI: {app.config['SQLALCHEMY_DATABASE_URI']}")

# Verificar permissões de escrita no diretório instance
try:
    test_file = os.path.join(instance_dir, 'test_write.txt')
    with open(test_file, 'w') as f:
        f.write('test')
    os.remove(test_file)
    logger.info(f"Permissões de escrita verificadas com sucesso em: {instance_dir}")
except Exception as e:
    logger.error(f"Erro de permissão no diretório instance: {str(e)}")
    raise

# Inicializar Firebase
try:
    cred = credentials.Certificate('technobug-6daca-firebase-adminsdk-fbsvc-19273e6f57.json')
    firebase_admin.initialize_app(cred)
    logger.info("Firebase inicializado com sucesso")
except Exception as e:
    logger.error(f"Erro ao inicializar Firebase: {str(e)}")

class User(db.Model):
    __tablename__ = 'users'
    
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), index=True, nullable=False)
    email = db.Column(db.String(120), index=True, unique=True, nullable=False)
    password = db.Column(db.String(128), nullable=True)  # Permitir nulo para autenticação Google
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    def __repr__(self):
        return f'<User {self.username}>'

class Post(db.Model):
    __tablename__ = 'posts'
    
    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    
    author = db.relationship('User', backref=db.backref('posts', lazy=True))
    
    def __repr__(self):
        return f'<Post {self.id} by {self.author.username}>'

@app.route('/', methods=['GET', 'POST'])
def registroelogin():
    user_id = session.get('user_id')
    if user_id:
        user = db.session.get(User, user_id)
        if not user:
            session.clear()
        else:
            return redirect(url_for('telainicial'))
    
    if request.method == 'POST':
        if 'login' in request.form:
            email = request.form.get('email')
            password = request.form.get('password')
            
            if not email or not password:
                flash('Por favor, preencha todos os campos.', 'error')
                return redirect(url_for('registroelogin'))
            
            user = User.query.filter_by(email=email).first()
            if user and user.password and check_password_hash(user.password, password):
                session['user_id'] = user.id
                session['username'] = user.username
                flash(f'Bem-vindo de volta, {user.username}!', 'success')
                return redirect(url_for('telainicial'))
            else:
                flash('Email ou senha incorretos.', 'error')
                return redirect(url_for('registroelogin'))
                
        elif 'register' in request.form:
            username = request.form.get('username')
            email = request.form.get('email')
            password = request.form.get('password')
            confirm_password = request.form.get('confirm_password')
            
            if not username or not email or not password or not confirm_password:
                flash('Por favor, preencha todos os campos.', 'error')
                return redirect(url_for('registroelogin'))
                
            if password != confirm_password:
                flash('As senhas não coincidem.', 'error')
                return redirect(url_for('registroelogin'))
                
            existing_user = User.query.filter_by(email=email).first()
            if existing_user:
                flash('Este email já está em uso.', 'error')
                return redirect(url_for('registroelogin'))
                
            new_user = User(
                username=username,
                email=email,
                password=generate_password_hash(password)
            )
            try:
                db.session.add(new_user)
                db.session.commit()
                flash('Conta criada com sucesso! Faça login para continuar.', 'success')
            except Exception as e:
                db.session.rollback()
                logger.error(f"Erro ao criar usuário: {str(e)}")
                flash('Erro ao criar conta. Tente novamente.', 'error')
            
            return redirect(url_for('registroelogin'))
    
    return render_template('registroelogin.html')

@app.route('/verify-token', methods=['POST'])
def verify_token():
    id_token = request.json.get('idToken')
    try:
        decoded_token = auth.verify_id_token(id_token)
        email = decoded_token.get('email')
        username = decoded_token.get('name', email.split('@')[0])
        uid = decoded_token['uid']
        
        user = User.query.filter_by(email=email).first()
        if not user:
            user = User(
                username=username,
                email=email,
                password=''  # Sem senha para autenticação Google
            )
            try:
                db.session.add(user)
                db.session.commit()
                logger.info(f"Usuário {email} criado com sucesso")
            except Exception as e:
                db.session.rollback()
                logger.error(f"Erro ao criar usuário no banco: {str(e)}")
                return jsonify({'status': 'error', 'message': 'Erro ao criar usuário no banco de dados'}), 500
        
        session['user_id'] = user.id
        session['username'] = user.username
        
        return jsonify({'status': 'success', 'user': {'id': user.id, 'username': user.username, 'email': user.email}})
    except auth.ExpiredIdTokenError:
        logger.warning("Token expirado recebido")
        return jsonify({'status': 'error', 'message': 'Token expirado. Faça login novamente.'}), 401
    except Exception as e:
        logger.error(f"Erro ao verificar token: {str(e)}")
        return jsonify({'status': 'error', 'message': 'Erro ao verificar token'}), 401

@app.route('/materiais-de-estudo')
def materiais():
    return render_template('materiaisestudo.html')

@app.route('/pdfs-e-apostilas')
def pdfs():
    return render_template('pdfeapostilas.html')

@app.route('/videos-e-tutoriais')
def videos():
    return render_template('videosetutoriais.html')

@app.route('/codigo')
def codigo():
    return render_template('exemplosdecodigo.html')

@app.route('/telainicial', methods=['GET', 'POST'])
def telainicial():
    user_id = session.get('user_id')
    if not user_id:
        flash('Por favor, faça login para acessar esta página.', 'error')
        return redirect(url_for('registroelogin'))
    
    user = db.session.get(User, user_id)
    if not user:
        session.clear()
        flash('Sua sessão expirou ou o usuário não existe mais.', 'error')
        return redirect(url_for('registroelogin'))
    
    if request.method == 'POST':
        content = request.form.get('content')
        if content:
            new_post = Post(content=content, user_id=user.id)
            try:
                db.session.add(new_post)
                db.session.commit()
                flash('Postagem publicada com sucesso!', 'success')
            except Exception as e:
                db.session.rollback()
                logger.error(f"Erro ao criar postagem: {str(e)}")
                flash('Erro ao publicar postagem. Tente novamente.', 'error')
            return redirect(url_for('telainicial'))
    
    posts = Post.query.order_by(Post.created_at.desc()).all()
    
    return render_template('telainicial.html', user=user, posts=posts)

@app.route('/logout')
def logout():
    session.clear()
    flash('Você saiu da sua conta.', 'info')
    return redirect(url_for('registroelogin'))

@app.route('/delete_post/<int:post_id>', methods=['POST'])
def delete_post(post_id):
    if 'user_id' not in session:
        flash('Por favor, faça login para realizar esta ação.', 'error')
        return redirect(url_for('registroelogin'))
    
    post = Post.query.get_or_404(post_id)
    
    if post.user_id != session['user_id']:
        flash('Você não tem permissão para deletar esta postagem.', 'error')
        return redirect(url_for('telainicial'))
    
    try:
        db.session.delete(post)
        db.session.commit()
        flash('Postagem deletada com sucesso!', 'success')
    except Exception as e:
        db.session.rollback()
        logger.error(f"Erro ao deletar postagem: {str(e)}")
        flash('Erro ao deletar postagem. Tente novamente.', 'error')
    
    return redirect(url_for('telainicial'))

with app.app_context():
    try:
        # Verificar se o diretório do banco de dados é acessível
        db_path = os.path.join(instance_dir, 'app.db')
        if not os.path.exists(instance_dir):
            logger.error(f"Diretório instance não encontrado: {instance_dir}")
            raise FileNotFoundError(f"Diretório instance não encontrado: {instance_dir}")
        
        # Tentar abrir o arquivo do banco de dados
        with open(db_path, 'a'):
            pass  # Apenas verificar se é possível criar/acessar o arquivo
        
        db.create_all()
        logger.info("Tabelas do banco de dados criadas com sucesso")
    except Exception as e:
        logger.error(f"Erro ao criar tabelas do banco de dados: {str(e)}")
        raise

if __name__ == '__main__':
    app.run(debug=True)




mande oque eu deva faeer 