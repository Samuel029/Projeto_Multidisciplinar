app.py from flask import Flask, render_template, request, redirect, url_for, flash, session, jsonify
from werkzeug.security import generate_password_hash, check_password_hash
from backend.extensions import db
from backend.models import User, Post, Comment
from datetime import datetime
import os
import firebase_admin
from firebase_admin import auth, credentials
from flask_migrate import Migrate
import logging

# Configurar logging para depuração
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.config.from_object('backend.config.Config')
db.init_app(app)
migrate = Migrate(app, db)

# Criar pasta instance se não existir
instance_dir = app.config['INSTANCE_DIR']
if not os.path.exists(instance_dir):
    try:
        os.makedirs(instance_dir)
        logger.info(f"Pasta instance criada em: {instance_dir}")
    except Exception as e:
        logger.error(f"Erro ao criar pasta instance: {str(e)}")
        raise

# Log do caminho do banco de dados
logger.info(f"SQLALCHEMY_DATABASE_URI: {app.config['SQLALCHEMY_DATABASE_URI']}")

# Verificar permissões de escrita no diretório instance
try:
    test_file = os.path.join(instance_dir, 'test_write.txt')
    with open(test_file, 'w') as f:
        f.write('test')
    os.remove(test_file)
    logger.info(f"Permissões de escrita verificadas com sucesso em: {instance_dir}")
except Exception as e:
    logger.error(f"Erro de permissão no diretório instance: {str(e)}")
    raise

# Inicializar Firebase
try:
    cred = credentials.Certificate('technobug-6daca-firebase-adminsdk-fbsvc-19273e6f57.json')
    firebase_admin.initialize_app(cred)
    logger.info("Firebase inicializado com sucesso")
except Exception as e:
    logger.error(f"Erro ao inicializar Firebase: {str(e)}")

@app.route('/', methods=['GET', 'POST'])
def registroelogin():
    user_id = session.get('user_id')
    if user_id:
        user = db.session.get(User, user_id)
        if not user:
            session.clear()
        else:
            return redirect(url_for('telainicial'))
    
    if request.method == 'POST':
        if 'login' in request.form:
            email = request.form.get('email')
            password = request.form.get('password')
            
            if not email or not password:
                flash('Por favor, preencha todos os campos.', 'error')
                return redirect(url_for('registroelogin'))
            
            user = User.query.filter_by(email=email).first()
            if user and user.password and check_password_hash(user.password, password):
                session['user_id'] = user.id
                session['username'] = user.username
                flash(f'Bem-vindo de volta, {user.username}!', 'success')
                return redirect(url_for('telainicial'))
            else:
                flash('Email ou senha incorretos.', 'error')
                return redirect(url_for('registroelogin'))
                
        elif 'register' in request.form:
            username = request.form.get('username')
            email = request.form.get('email')
            password = request.form.get('password')
            confirm_password = request.form.get('confirm_password')
            
            if not username or not email or not password or not confirm_password:
                flash('Por favor, preencha todos os campos.', 'error')
                return redirect(url_for('registroelogin'))
                
            if password != confirm_password:
                flash('As senhas não coincidem.', 'error')
                return redirect(url_for('registroelogin'))
                
            existing_user = User.query.filter_by(email=email).first()
            if existing_user:
                flash('Este email já está em uso.', 'error')
                return redirect(url_for('registroelogin'))
                
            new_user = User(
                username=username,
                email=email,
                password=generate_password_hash(password)
            )
            try:
                db.session.add(new_user)
                db.session.commit()
                flash('Conta criada com sucesso! Faça login para continuar.', 'success')
            except Exception as e:
                db.session.rollback()
                logger.error(f"Erro ao criar usuário: {str(e)}")
                flash('Erro ao criar conta. Tente novamente.', 'error')
            
            return redirect(url_for('registroelogin'))
    
    return render_template('registroelogin.html')

@app.route('/verify-token', methods=['POST'])
def verify_token():
    id_token = request.json.get('idToken')
    try:
        decoded_token = auth.verify_id_token(id_token)
        email = decoded_token.get('email')
        username = decoded_token.get('name', email.split('@')[0])
        uid = decoded_token['uid']
        
        user = User.query.filter_by(email=email).first()
        if not user:
            user = User(
                username=username,
                email=email,
                password=''  # Sem senha para autenticação Google
            )
            try:
                db.session.add(user)
                db.session.commit()
                logger.info(f"Usuário {email} criado com sucesso")
            except Exception as e:
                db.session.rollback()
                logger.error(f"Erro ao criar usuário no banco: {str(e)}")
                return jsonify({'status': 'error', 'message': 'Erro ao criar usuário no banco de dados'}), 500
        
        session['user_id'] = user.id
        session['username'] = user.username
        
        return jsonify({'status': 'success', 'user': {'id': user.id, 'username': user.username, 'email': user.email}})
    except auth.ExpiredIdTokenError:
        logger.warning("Token expirado recebido")
        return jsonify({'status': 'error', 'message': 'Token expirado. Faça login novamente.'}), 401
    except Exception as e:
        logger.error(f"Erro ao verificar token: {str(e)}")
        return jsonify({'status': 'error', 'message': 'Erro ao verificar token'}), 401

@app.route('/videos-e-tutoriais')
def videos():
    user_id = session.get('user_id')
    if not user_id:
        flash('Por favor, faça login para acessar esta página.', 'error')
        return redirect(url_for('registroelogin'))
    
    user = db.session.get(User, user_id)
    if not user:
        session.clear()
        flash('Sua sessão expirou ou o usuário não existe mais.', 'error')
        return redirect(url_for('registroelogin'))
    
    return render_template('videosetutoriais.html', user=user)

@app.route('/materiais-de-estudo')
def materiais():
    user_id = session.get('user_id')
    if not user_id:
        flash('Por favor, faça login para acessar esta página.', 'error')
        return redirect(url_for('registroelogin'))
    
    user = db.session.get(User, user_id)
    if not user:
        session.clear()
        flash('Sua sessão expirou ou o usuário não existe mais.', 'error')
        return redirect(url_for('registroelogin'))
    
    return render_template('materiaisestudo.html', user=user)

@app.route('/pdfs-e-apostilas')
def pdfs():
    user_id = session.get('user_id')
    if not user_id:
        flash('Por favor, faça login para acessar esta página.', 'error')
        return redirect(url_for('registroelogin'))
    
    user = db.session.get(User, user_id)
    if not user:
        session.clear()
        flash('Sua sessão expirou ou o usuário não existe mais.', 'error')
        return redirect(url_for('registroelogin'))
    
    return render_template('pdfeapostilas.html', user=user)

@app.route('/codigo')
def codigo():
    user_id = session.get('user_id')
    if not user_id:
        flash('Por favor, faça login para acessar esta página.', 'error')
        return redirect(url_for('registroelogin'))
    
    user = db.session.get(User, user_id)
    if not user:
        session.clear()
        flash('Sua sessão expirou ou o usuário não existe mais.', 'error')
        return redirect(url_for('registroelogin'))
    
    return render_template('exemplosdecodigo.html', user=user)

@app.route('/telainicial', methods=['GET', 'POST'])
def telainicial():
    user_id = session.get('user_id')
    if not user_id:
        flash('Por favor, faça login para acessar esta página.', 'error')
        return redirect(url_for('registroelogin'))
    
    user = db.session.get(User, user_id)
    if not user:
        session.clear()
        flash('Sua sessão expirou ou o usuário não existe mais.', 'error')
        return redirect(url_for('registroelogin'))
    
    if request.method == 'POST':
        content = request.form.get('content')
        category = request.form.get('category')
        if content and category:
            new_post = Post(content=content, user_id=user.id, category=category)
            try:
                db.session.add(new_post)
                db.session.commit()
                flash('Postagem publicada com sucesso!', 'success')
            except Exception as e:
                db.session.rollback()
                logger.error(f"Erro ao criar postagem: {str(e)}")
                flash('Erro ao publicar postagem. Tente novamente.', 'error')
            return redirect(url_for('telainicial'))
    
    posts = Post.query.order_by(Post.created_at.desc()).all()
    
    return render_template('telainicial.html', user=user, posts=posts)

@app.route('/comment/<int:post_id>', methods=['POST'])
def add_comment(post_id):
    if 'user_id' not in session:
        return jsonify({'status': 'error', 'message': 'Por favor, faça login para comentar.'}), 401
    
    post = Post.query.get_or_404(post_id)
    content = request.form.get('comment_content')
    
    if not content:
        return jsonify({'status': 'error', 'message': 'O comentário não pode estar vazio.'}), 400
    
    new_comment = Comment(
        content=content,
        user_id=session['user_id'],
        post_id=post_id
    )
    
    try:
        db.session.add(new_comment)
        db.session.commit()
        return jsonify({
            'status': 'success',
            'comment': {
                'id': new_comment.id,
                'content': new_comment.content,
                'username': new_comment.author.username,
                'created_at': new_comment.created_at.strftime('%d/%m/%Y %H:%M')
            }
        })
    except Exception as e:
        db.session.rollback()
        logger.error(f"Erro ao adicionar comentário: {str(e)}")
        return jsonify({'status': 'error', 'message': 'Erro ao adicionar comentário.'}), 500
    


@app.route('/delete_post/<int:post_id>', methods=['POST'])
def delete_post(post_id):
    if 'user_id' not in session:
        return jsonify({'status': 'error', 'message': 'Por favor, faça login para realizar esta ação.'}), 401
    
    post = Post.query.get_or_404(post_id)
    
    if post.user_id != session['user_id']:
        return jsonify({'status': 'error', 'message': 'Você não tem permissão para deletar esta postagem.'}), 403
    
    try:
        db.session.delete(post)
        db.session.commit()
        return jsonify({'status': 'success', 'message': 'Postagem deletada com sucesso!'})
    except Exception as e:
        db.session.rollback()
        logger.error(f"Erro ao deletar postagem: {str(e)}")
        return jsonify({'status': 'error', 'message': 'Erro ao deletar postagem. Tente novamente.'}), 500

@app.route('/logout')
def logout():
    session.clear()
    flash('Você saiu da sua conta.', 'info')
    return redirect(url_for('registroelogin'))

with app.app_context():
    try:
        # Verificar se o diretório do banco de dados é acessível
        db_path = os.path.join(instance_dir, 'app.db')
        if not os.path.exists(instance_dir):
            logger.error(f"Diretório instance não encontrado: {instance_dir}")
            raise FileNotFoundError(f"Diretório instance não encontrado: {instance_dir}")
        
        # Tentar abrir o arquivo do banco de dados
        with open(db_path, 'a'):
            pass  # Apenas verificar se é possível criar/acessar o arquivo
        
        db.create_all()
        logger.info("Tabelas do banco de dados criadas com sucesso")
    except Exception as e:
        logger.error(f"Erro ao criar tabelas do banco de dados: {str(e)}")
        raise

if __name__ == '__main__':
    app.run(debug=True)


config.py

import os

class Config:
    # Secret key for session
    SECRET_KEY = os.environ.get('SECRET_KEY') or os.urandom(32).hex()  # Gerar chave aleatória se não definida
    
    # SQLite database configuration
    basedir = os.path.abspath(os.path.dirname(__file__))  # Diretório do config.py
    INSTANCE_DIR = os.path.join(basedir, 'instance')  # Pasta instance
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
        f'sqlite:///{os.path.join(INSTANCE_DIR, "app.db")}'  # Caminho absoluto
    SQLALCHEMY_TRACK_MODIFICATIONS = False



extensions.py from flask_sqlalchemy import SQLAlchemy

# Inicializa a extensão do SQLAlchemy
db = SQLAlchemy()



models.py

from backend.extensions import db
from datetime import datetime
import pytz

# Fuso horário de Brasília
BRASILIA_TZ = pytz.timezone('America/Sao_Paulo')

class User(db.Model):
    __tablename__ = 'users'
    
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), index=True, nullable=False)
    email = db.Column(db.String(120), index=True, unique=True, nullable=False)
    password = db.Column(db.String(128), nullable=True)  # Permitir nulo para autenticação Google
    created_at = db.Column(db.DateTime, default=lambda: datetime.now(BRASILIA_TZ))
    
    def __repr__(self):
        return f'<User {self.username}>'

class Post(db.Model):
    __tablename__ = 'posts'
    
    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.Text, nullable=False)
    category = db.Column(db.String(50), nullable=False, default='Dúvidas Gerais')
    created_at = db.Column(db.DateTime, default=lambda: datetime.now(BRASILIA_TZ))
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    
    author = db.relationship('User', backref=db.backref('posts', lazy=True))
    
    def __repr__(self):
        return f'<Post {self.id} by {self.author.username}>'

class Comment(db.Model):
    __tablename__ = 'comments'
    
    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, default=lambda: datetime.now(BRASILIA_TZ))
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    post_id = db.Column(db.Integer, db.ForeignKey('posts.id'), nullable=False)
    
    author = db.relationship('User', backref=db.backref('comments', lazy=True))
    post = db.relationship('Post', backref=db.backref('comments', lazy=True))
    
    def __repr__(self):
        return f'<Comment {self.id} by {self.author.username} on Post {self.post_id}>'




ao curtir um comnaterio, com uma conta, quando outor usuario loga, marca como s eele tivesse curtido, e se apertar para remover a curtida que outro usuario tinha feito

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TechNoBug - Tela Inicial</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/telainicial.css') }}">
</head>
<body>
    <!-- Header -->
    <header class="app-header">
        <div class="header-content">
            <div class="search-bar">
                <i class="fas fa-search"></i>
                <input type="text" placeholder="Pesquisar postagens, tópicos...">
            </div>
            <div class="logo">
                <i class="fas fa-graduation-cap"></i>
                <span>TechNoBug</span>
            </div>
            <button class="btn menu-btn" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasMenu" aria-controls="offcanvasMenu">
                <i class="fas fa-bars"></i>
                <span>Menu</span>
            </button>
        </div>
    </header>

    <!-- Offcanvas Menu -->
    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasMenu" aria-labelledby="offcanvasMenuLabel">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="offcanvasMenuLabel">Menu</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <div class="user-profile mb-4">
                <div class="d-flex align-items-center">
                    <div class="avatar me-3">
                        <div class="avatar-initials bg-primary text-white rounded-circle d-flex justify-content-center align-items-center">
                            {{ user.username[0]|upper }}
                        </div>
                    </div>
                    <div>
                        <h6 class="mb-0">{{ user.username }}</h6>
                        <small class="text-muted">{{ user.email }}</small>
                    </div>
                </div>
            </div>
            <ul class="navbar-nav">
                <li class="nav-item mb-2"><a class="nav-link active" href="{{ url_for('telainicial') }}"><i class="fas fa-home me-2"></i>Página Inicial</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="{{ url_for('materiais') }}"><i class="fas fa-book me-2"></i>Materiais de Estudo</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="{{ url_for('pdfs') }}"><i class="fas fa-file-pdf me-2"></i>PDFs e Apostilas</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="{{ url_for('videos') }}"><i class="fas fa-video me-2"></i>Vídeos e Tutoriais</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="{{ url_for('codigo') }}"><i class="fas fa-code me-2"></i>Exemplos de Código</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="#"><i class="fas fa-users me-2"></i>Comunidade</a></li>
                <li class="nav-item mb-2"><a class="nav-link" href="#"><i class="fas fa-cog me-2"></i>Configurações</a></li>
                <li class="nav-item"><a class="nav-link text-danger" href="{{ url_for('logout') }}"><i class="fas fa-sign-out-alt me-2"></i>Sair</a></li>
            </ul>
        </div>
    </div>

    <!-- Category Navigation -->
    <nav class="category-nav">
        <div class="categories-wrapper">
            <div class="categories">
                <div class="category active" data-category="Todas">Todas</div>
                <div class="category" data-category="Versionamento">Versionamento</div>
                <div class="category" data-category="IA">IA</div>
                <div class="category" data-category="Modelagem a Banco de Dados">Modelagem a Banco de Dados</div>
                <div class="category" data-category="Logica">Lógica</div>
                <div class="category" data-category="Processos">Processos</div>
                <div class="category" data-category="Front-end">Front-end</div>
                <div class="category" data-category="Back-end">Back-end</div>
                <div class="category" data-category="Programacao Android">Programação Android</div>
                <div class="category" data-category="Projeto Multidisciplinar">Projeto Multidisciplinar</div>
                <div class="category" data-category="Carreiras">Carreiras</div>
                <div class="category" data-category="Redes">Redes</div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container">
        <main class="main-content">
            <!-- Post Creation Section -->
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-edit"></i>
                    <span>Compartilhe sua Dúvida</span>
                </h2>
            </div>
            <div class="post-creation-card">
                <form method="POST" action="{{ url_for('telainicial') }}" id="postForm">
                    <div class="mb-3 position-relative">
                        <textarea class="form-control" name="content" rows="4" placeholder="O que você está pensando, {{ user.username }}?" required></textarea>
                        <div class="char-counter">0/500</div>
                    </div>
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="category-selector">
                            <select name="category" class="form-select" aria-label="Selecione uma categoria">
                                <option value="Duvidas Gerais">Dúvidas Gerais</option>
                                <option value="Programacao">Programação</option>
                                <option value="IA">IA</option>
                                <option value="Banco de Dados">Banco de Dados</option>
                                <option value="Modelagem a Banco de Dados">Modelagem a Banco de Dados</option>
                                <option value="Logica">Lógica</option>
                                <option value="Processos">Processos</option>
                                <option value="Front-end">Front-end</option>
                                <option value="Back-end">Back-end</option>
                                <option value="Programacao Android">Programação Android</option>
                                <option value="Projeto Multidisciplinar">Projeto Multidisciplinar</option>
                                <option value="Carreiras">Carreiras</option>
                                <option value="Redes">Redes</option>
                                <option value="Versionamento">Versionamento</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary btn-publish">
                            <i class="fas fa-paper-plane me-2"></i>Publicar
                        </button>
                    </div>
                </form>
            </div>

            <!-- Recent Posts Section -->
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-stream"></i>
                    <span>Postagens Recentes</span>
                </h2>
            </div>
            <div class="post-grid">
                {% if posts %}
                    {% for post in posts %}
                        <div class="post-card" data-post-id="{{ post.id }}" data-category="{{ post.category }}">
                            <div class="post-header">
                                <div class="user-info">
                                    <div class="avatar">
                                        <div class="avatar-initials bg-primary text-white rounded-circle d-flex justify-content-center align-items-center">
                                            {{ post.author.username[0]|upper }}
                                        </div>
                                    </div>
                                    <div>
                                        <h5 class="username">{{ post.author.username }}</h5>
                                        <small class="text-muted">{{ post.created_at.strftime('%d/%m/%Y %H:%M') }}</small>
                                    </div>
                                </div>
                                {% if post.user_id == user.id %}
                                    <div class="post-actions">
                                        <button class="btn btn-sm btn-danger delete-post" data-post-id="{{ post.id }}">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                {% endif %}
                            </div>
                            <div class="post-content">
                                <div class="post-category-tag">{{ post.category }}</div>
                                <p>{{ post.content }}</p>
                            </div>
                            <div class="post-footer">
                                <button class="btn btn-sm btn-outline-primary like-btn">
                                    <i class="fas fa-thumbs-up"></i> <span class="like-count">0</span>
                                </button>
                                <button class="btn btn-sm btn-outline-secondary comment-btn">
                                    <i class="fas fa-comment"></i> Comentar
                                </button>
                            </div>
                        </div>
                    {% endfor %}
                {% else %}
                    <div class="empty-state-card">
                        <div class="text-center py-5">
                            <i class="fas fa-comment-slash fa-3x mb-3 text-muted"></i>
                            <h5>Nenhuma postagem ainda</h5>
                            <p class="text-muted">Seja o primeiro a compartilhar!</p>
                        </div>
                    </div>
                {% endif %}
            </div>
        </main>
    </div>

    <!-- Footer -->
    <footer class="app-footer">
        <div class="footer-content">
            <div class="footer-column">
                <h3>Sobre Nós</h3>
                <ul class="footer-links">
                    <li><a href="#"><i class="fas fa-info-circle"></i> Nossa Missão</a></li>
                    <li><a href="#"><i class="fas fa-users"></i> Equipe</a></li>
                    <li><a href="#"><i class="fas fa-building"></i> Parceiros</a></li>
                    <li><a href="#"><i class="fas fa-newspaper"></i> Blog</a></li>
                </ul>
            </div>
            <div class="footer-column">
                <h3>Recursos</h3>
                <ul class="footer-links">
                    <li><a href="#"><i class="fas fa-book"></i> Biblioteca</a></li>
                    <li><a href="#"><i class="fas fa-code"></i> Projetos</a></li>
                    <li><a href="#"><i class="fas fa-certificate"></i> Certificações</a></li>
                    <li><a href="#"><i class="fas fa-download"></i> Downloads</a></li>
                </ul>
            </div>
            <div class="footer-column">
                <h3>Comunidade</h3>
                <ul class="footer-links">
                    <li><a href="#"><i class="fas fa-comments"></i> Fórum</a></li>
                    <li><a href="#"><i class="fas fa-chalkboard-teacher"></i> Webinars</a></li>
                    <li><a href="#"><i class="fas fa-handshake"></i> Programas de Mentoria</a></li>
                    <li><a href="#"><i class="fas fa-laptop-code"></i> Hackathons</a></li>
                </ul>
            </div>
            <div class="footer-column">
                <h3>Contato</h3>
                <ul class="footer-links">
                    <li><a href="#"><i class="fas fa-envelope"></i> Suporte</a></li>
                    <li><a href="#"><i class="fas fa-headset"></i> Fale Conosco</a></li>
                    <li><a href="#"><i class="fas fa-map-marker-alt"></i> Localização</a></li>
                    <li><a href="#"><i class="fas fa-question-circle"></i> FAQ</a></li>
                </ul>
            </div>
        </div>
        <div class="footer-bottom">
            <p>© 2025 TechNoBug. Todos os direitos reservados.</p>
        </div>
    </footer>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/telainicial.js') }}"></script>
</body>
</html>